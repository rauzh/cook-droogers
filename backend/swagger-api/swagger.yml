swagger: '2.0'
info:
  version: 1.0.0
  title: Swagger-Cook-Droogers
host: 0.0.0.0:13337
basePath: /api
tags:
  - name: artist
  - name: manager
  - name: user
  - name: requests
  - name: tracks
  - name: releases
  - name: auth

securityDefinitions:
  basicAuth:
    type: basic

schemes:
  - http
paths:

  # =================== REQUESTS ===================

  /requests:
    get:
      summary: Get requests
      tags:
        - requests
      security:
        - basicAuth: [ ]
      operationId: getRequests
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/RequestDTO'
        401:
          description: Auth error
        403:
          description: Invalid user type
        500:
          description: Internal error

  /requests/{req_id}:
    get:
      summary: Get specified request
      tags:
        - requests
      security:
        - basicAuth: [ ]
      operationId: getRequest
      parameters:
        - in: path
          name: req_id
          required: true
          type: integer
          format: uint64
          description: "ID заявки"
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/PublishRequestDTO'
        401:
          description: Auth error
          schema:
            $ref: '#/definitions/LeErrorMessage'
        403:
          description: Invalid user type
          schema:
            $ref: '#/definitions/LeErrorMessage'
        404:
          description: No such request
          schema:
            $ref: '#/definitions/LeErrorMessage'
        422:
          description: Invalid params
          schema:
            $ref: '#/definitions/LeErrorMessage'
        500:
          description: Internal error
          schema:
            $ref: '#/definitions/LeErrorMessage'

  # =================== ARTIST ====================

  /artists/{artist_id}:
    get:
      summary: Get artist data
      tags:
        - artist
      security:
        - basicAuth: [ ]
      operationId: getArtistByID
      parameters:
        - in: path
          name: artist_id
          required: true
          type: integer
          format: uint64
          description: "ID артиста"
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/ArtistDTO'
        401:
          description: Auth error
          schema:
            $ref: '#/definitions/LeErrorMessage'
        403:
          description: Invalid user type
          schema:
            $ref: '#/definitions/LeErrorMessage'
        404:
          description: No such artist
          schema:
            $ref: '#/definitions/LeErrorMessage'
        422:
          description: Invalid params
          schema:
            $ref: '#/definitions/LeErrorMessage'
        500:
          description: Internal error
          schema:
            $ref: '#/definitions/LeErrorMessage'

  /requests/publications:
    post:
      summary: Create publish request
      security:
        - basicAuth: [ ]
      tags:
        - requests
      operationId: publishReq
      consumes:
        - application/json
      parameters:
        - in: body
          name: publication_info
          description: "Поля заявки на публикацию релиза"
          required: true
          schema:
            $ref: '#/definitions/PublishRequestInput'
      responses:
        201:
          description: Request successfully created
        401:
          description: Auth error
          schema:
            $ref: '#/definitions/LeErrorMessage'
        403:
          description: Invalid user type
          schema:
            $ref: '#/definitions/LeErrorMessage'
        422:
          description: Invalid params
          schema:
            $ref: '#/definitions/LeErrorMessage'
        500:
          description: Internal error
          schema:
            $ref: '#/definitions/LeErrorMessage'

  /releases:

    get:
      summary: Get releases
      security:
        - basicAuth: [ ]
      tags:
        - releases
      operationId: getRelease
      consumes:
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/ReleaseDTO'
        401:
          description: Auth error
          schema:
            $ref: '#/definitions/LeErrorMessage'
        403:
          description: Invalid user type
          schema:
            $ref: '#/definitions/LeErrorMessage'
        500:
          description: Internal error
          schema:
            $ref: '#/definitions/LeErrorMessage'

    post:
      summary: Upload release
      security:
        - basicAuth: [ ]
      tags:
        - releases
      operationId: addRelease
      consumes:
        - application/json
      parameters:
        - in: query
          name: title
          required: true
          type: string
          description: "Название релиза"
        - in: query
          name: date
          required: true
          type: string
          format: date
          description: "Дата написания релиза"
        - in: body
          name: tracks
          description: "Треки данного релиза"
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/TrackDTO'
      responses:
        201:
          description: Request successfully created
        401:
          description: Auth error
          schema:
            $ref: '#/definitions/LeErrorMessage'
        403:
          description: Invalid user type
          schema:
            $ref: '#/definitions/LeErrorMessage'
        422:
          description: Invalid params
          schema:
            $ref: '#/definitions/LeErrorMessage'
        500:
          description: Internal error
          schema:
            $ref: '#/definitions/LeErrorMessage'

  /releases/{release_id}:
    get:
      summary: Get release data
      tags:
        - releases
      security:
        - basicAuth: [ ]
      operationId: getReleaseByID
      parameters:
        - in: path
          name: release_id
          required: true
          type: integer
          format: uint64
          description: "ID релиза"
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/ReleaseDTO'
        401:
          description: Auth error
          schema:
            $ref: '#/definitions/LeErrorMessage'
        403:
          description: Invalid user type
          schema:
            $ref: '#/definitions/LeErrorMessage'
        404:
          description: No such release
          schema:
            $ref: '#/definitions/LeErrorMessage'
        422:
          description: Invalid params
          schema:
            $ref: '#/definitions/LeErrorMessage'
        500:
          description: Internal error
          schema:
            $ref: '#/definitions/LeErrorMessage'

  /tracks/{track_id}:
    get:
      summary: Get track data
      tags:
        - tracks
      security:
        - basicAuth: [ ]
      operationId: getTrackByID
      parameters:
        - in: path
          name: track_id
          required: true
          type: integer
          format: uint64
          description: "ID трека"
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/TrackDTO'
        401:
          description: Auth error
          schema:
            $ref: '#/definitions/LeErrorMessage'
        403:
          description: Invalid user type
          schema:
            $ref: '#/definitions/LeErrorMessage'
        404:
          description: No such track
          schema:
            $ref: '#/definitions/LeErrorMessage'
        422:
          description: Invalid params
          schema:
            $ref: '#/definitions/LeErrorMessage'
        500:
          description: Internal error
          schema:
            $ref: '#/definitions/LeErrorMessage'

  # =================== MANAGER ===================

  /managers/{manager_id}:
    get:
      summary: Get manager data
      tags:
        - manager
      security:
        - basicAuth: [ ]
      operationId: getManagerByID
      parameters:
        - in: path
          name: manager_id
          required: true
          type: integer
          format: uint64
          description: "ID менеджера"
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/ManagerDTO'
        401:
          description: Auth error
          schema:
            $ref: '#/definitions/LeErrorMessage'
        403:
          description: Invalid user type
          schema:
            $ref: '#/definitions/LeErrorMessage'
        404:
          description: No such manager
          schema:
            $ref: '#/definitions/LeErrorMessage'
        422:
          description: Invalid params
          schema:
            $ref: '#/definitions/LeErrorMessage'
        500:
          description: Internal error
          schema:
            $ref: '#/definitions/LeErrorMessage'

  /requests/{req_id}/accept:
    patch:
      summary: Accept specified request
      tags:
        - requests
      security:
        - basicAuth: [ ]
      operationId: acceptRequest
      parameters:
        - in: path
          name: req_id
          required: true
          type: integer
          format: uint64
          description: "ID заявки"
      responses:
        200:
          description: Success
        401:
          description: Auth error
          schema:
            $ref: '#/definitions/LeErrorMessage'
        403:
          description: Invalid user type (or this manager is not maintainer of the request)
          schema:
            $ref: '#/definitions/LeErrorMessage'
        404:
          description: No such request
          schema:
            $ref: '#/definitions/LeErrorMessage'
        422:
          description: Invalid params
          schema:
            $ref: '#/definitions/LeErrorMessage'
        500:
          description: Internal error
          schema:
            $ref: '#/definitions/LeErrorMessage'

  /requests/{req_id}/decline:
    patch:
      summary: Decline specified request
      tags:
        - requests
      security:
        - basicAuth: [ ]
      operationId: declineRequest
      parameters:
        - in: path
          name: req_id
          required: true
          type: integer
          format: uint64
          description: "ID заявки"
      responses:
        200:
          description: Success
        401:
          description: Auth error
          schema:
            $ref: '#/definitions/LeErrorMessage'
        403:
          description: Invalid user type (or this manager is not maintainer of the request)
          schema:
            $ref: '#/definitions/LeErrorMessage'
        404:
          description: No such request
          schema:
            $ref: '#/definitions/LeErrorMessage'
        422:
          description: Invalid params
          schema:
            $ref: '#/definitions/LeErrorMessage'
        500:
          description: Internal error
          schema:
            $ref: '#/definitions/LeErrorMessage'

  # ================== NON-MEMBER ==================

  /users/{user_id}:
    get:
      summary: Get user data
      tags:
        - users
      security:
        - basicAuth: [ ]
      operationId: getUserByID
      parameters:
        - in: path
          name: user_id
          required: true
          type: integer
          format: uint64
          description: "ID юзера"
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/UserDTO'
        401:
          description: Auth error
          schema:
            $ref: '#/definitions/LeErrorMessage'
        403:
          description: Invalid user type
          schema:
            $ref: '#/definitions/LeErrorMessage'
        404:
          description: No such user
          schema:
            $ref: '#/definitions/LeErrorMessage'
        422:
          description: Invalid params
          schema:
            $ref: '#/definitions/LeErrorMessage'
        500:
          description: Internal error
          schema:
            $ref: '#/definitions/LeErrorMessage'

  /requests/contracts:
    post:
      summary: Create sign request
      security:
        - basicAuth: [ ]
      tags:
        - requests
      operationId: signContract
      consumes:
        - application/json
      parameters:
        - in: query
          name: nickname
          required: true
          type: string
          description: "Псевдоним"
      responses:
        201:
          description: Request successfully created
        401:
          description: Auth error
          schema:
            $ref: '#/definitions/LeErrorMessage'
        403:
          description: Invalid user type
          schema:
            $ref: '#/definitions/LeErrorMessage'
        422:
          description: Invalid params
          schema:
            $ref: '#/definitions/LeErrorMessage'
        500:
          description: Internal error
          schema:
            $ref: '#/definitions/LeErrorMessage'

  # ================== ADMIN ==================

  /managers:
    get:
      summary: Get list of managers
      tags:
        - manager
      operationId: getManagers
      security:
        - basicAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/ManagerDTO'
        401:
          description: Auth error
          schema:
            $ref: '#/definitions/LeErrorMessage'
        403:
          description: Invalid user type
          schema:
            $ref: '#/definitions/LeErrorMessage'
        500:
          description: Internal error
          schema:
            $ref: '#/definitions/LeErrorMessage'
    post:
      summary: Create manager
      tags:
        - manager
      operationId: addManager
      security:
        - basicAuth: [ ]
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: query
          name: user_id
          required: true
          type: array
          items:
            type: integer
            format: uint64
          description: "ID пользователя"
      responses:
        201:
          description: Manager successfully created
        401:
          description: Auth error
          schema:
            $ref: '#/definitions/LeErrorMessage'
        403:
          description: Invalid user type (your role)
          schema:
            $ref: '#/definitions/LeErrorMessage'
        404:
          description: No such user
          schema:
            $ref: '#/definitions/LeErrorMessage'
        409:
          description: Already exists
          schema:
            $ref: '#/definitions/LeErrorMessage'
        422:
          description: Invalid params
          schema:
            $ref: '#/definitions/LeErrorMessage'
        500:
          description: Internal error
          schema:
            $ref: '#/definitions/LeErrorMessage'

  /users:
    get:
      summary: Get list of users
      tags:
        - user
      operationId: getUsers
      security:
        - basicAuth: [ ]
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/UserDTO'
        401:
          description: Auth error
          schema:
            $ref: '#/definitions/LeErrorMessage'
        403:
          description: Invalid user type
          schema:
            $ref: '#/definitions/LeErrorMessage'
        500:
          description: Internal error
          schema:
            $ref: '#/definitions/LeErrorMessage'

  # ================== GUEST ==================

  /register:
    post:
      summary: Create new user
      tags:
        - auth
      operationId: register
      consumes:
        - application/json
      parameters:
        - in: query
          name: username
          required: true
          type: string
          description: "Имя пользователя"
        - in: query
          name: email
          required: true
          type: string
          format: email
          description: "Email пользователя"
        - in: query
          name: password
          required: true
          type: string
          description: "Пароль пользователя"

      responses:
        201:
          description: User successfully created
        409:
          description: User already exists
          schema:
            $ref: '#/definitions/LeErrorMessage'
        422:
          description: Invalid params
          schema:
            $ref: '#/definitions/LeErrorMessage'
        500:
          description: Internal error
          schema:
            $ref: '#/definitions/LeErrorMessage'


  /login:
    post:
      summary: Login, lol
      tags:
        - auth
      operationId: login
      parameters:
        - in: query
          name: email
          required: true
          type: string
          format: email
          description: "Email пользователя"
        - in: query
          name: password
          required: true
          type: string
          format: password
          description: "Пароль пользователя"

      responses:
        200:
          description: User successfully logged in
        401:
          description: Auth error
          schema:
            $ref: '#/definitions/LeErrorMessage'
        422:
          description: Invalid params
          schema:
            $ref: '#/definitions/LeErrorMessage'
        500:
          description: Internal error
          schema:
            $ref: '#/definitions/LeErrorMessage'

  # ================== ALL ==================

  /heartbeat:
    get:
      summary: Check health
      responses:
        200:
          description: Success

definitions:

  RegUserDTO:
    type: object
    required:
      - name
      - email
      - password
    properties:
      name:
        type: string
      email:
        type: string
        format: email
      password:
        type: string

  UserDTO:
    type: object
    properties:
      user_id:
        type: integer
        format: uint64
      name:
        type: string
      email:
        type: string
        format: email
      password:
        type: string
      type:
        type: integer
        enum:
          - 0  # NonMemberUser
          - 1  # ManagerUser
          - 2  # ArtistUser
          - 3  # Admin

  ArtistDTO:
    type: object
    properties:
      artist_id:
        type: integer
        format: uint64
      user_id:
        type: integer
        format: uint64
      manager_id:
        type: integer
        format: uint64
      nickname:
        type: string
      activity:
        type: boolean
      contract_term:
        type: string
        format: date

  ManagerDTO:
    type: object
    properties:
      manager_id:
        type: integer
        format: uint64
      user_id:
        type: integer
        format: uint64
      artists:
        type: array
        items:
          type: integer
          format: uint64

  StatsDTO:
    type: object
    properties:
      stat_id:
        type: integer
        format: uint64
      date:
        type: string
        format: date
      streams:
        type: integer
        format: uint64
      likes:
        type: integer
        format: uint64
      track_id:
        type: integer
        format: uint64

  TrackDTO:
    type: object
    required:
      - title
      - duration
      - genre
      - type
    properties:
      track_id:
        type: integer
        format: uint64
      title:
        type: string
      duration:
        type: integer
        format: uint64
      genre:
        type: string
      type:
        type: string
      artists:
        type: array
        items:
          type: integer
          format: uint64

  ReleaseDTO:
    type: object
    properties:
      release_id:
        type: integer
        format: uint64
      title:
        type: string
      status:
        type: string
        enum:
          - Unpublished
          - Published
      date_creation:
        type: string
        format: date
      tracks:
        type: array
        items:
          type: integer
          format: uint64
      artist_id:
        type: integer
        format: uint64

  RequestDTO:
    type: object
    properties:
      request_id:
        type: integer
        format: uint64
      type:
        type: string
        enum:
          - Publish
          - Sign
      status:
        type: string
        enum:
          - New
          - Processing
          - On approval
          - Closed
      date:
        type: string
        format: date
      applier_id:
        type: integer
        format: uint64
      manager_id:
        type: integer
        format: uint64

  PublishRequestDTO:
    type: object
    properties:
      base:
        $ref: '#/definitions/RequestDTO'
      release_id:
        type: integer
        format: uint64
      grade:
        type: integer
      expected_date:
        type: string
        format: date
      description:
        type: string

  SignRequestDTO:
    type: object
    properties:
      base:
        $ref: '#/definitions/RequestDTO'
      nickname:
        type: string
      description:
        type: string


  PublishRequestInput:
    type: object
    properties:
      release_id:
        type: integer
        format: uint64
      expected_date:
        type: string
        format: date

  LeErrorMessage:
    type: object
    properties:
      error:
        type: string

responses:
  UnauthorizedError:
    description: Authentication information is missing or invalid
    headers:
      WWW_Authenticate:
        type: string