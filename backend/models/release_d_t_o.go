// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReleaseDTO release d t o
//
// swagger:model ReleaseDTO
type ReleaseDTO struct {

	// artist id
	ArtistID uint64 `json:"artist_id,omitempty"`

	// date creation
	// Format: date
	DateCreation strfmt.Date `json:"date_creation,omitempty"`

	// release id
	ReleaseID uint64 `json:"release_id,omitempty"`

	// status
	// Enum: ["Unpublished","Published"]
	Status string `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// tracks
	Tracks []uint64 `json:"tracks"`
}

// Validate validates this release d t o
func (m *ReleaseDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateCreation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReleaseDTO) validateDateCreation(formats strfmt.Registry) error {
	if swag.IsZero(m.DateCreation) { // not required
		return nil
	}

	if err := validate.FormatOf("date_creation", "body", "date", m.DateCreation.String(), formats); err != nil {
		return err
	}

	return nil
}

var releaseDTOTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unpublished","Published"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		releaseDTOTypeStatusPropEnum = append(releaseDTOTypeStatusPropEnum, v)
	}
}

const (

	// ReleaseDTOStatusUnpublished captures enum value "Unpublished"
	ReleaseDTOStatusUnpublished string = "Unpublished"

	// ReleaseDTOStatusPublished captures enum value "Published"
	ReleaseDTOStatusPublished string = "Published"
)

// prop value enum
func (m *ReleaseDTO) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, releaseDTOTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ReleaseDTO) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this release d t o based on context it is used
func (m *ReleaseDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ReleaseDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReleaseDTO) UnmarshalBinary(b []byte) error {
	var res ReleaseDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
