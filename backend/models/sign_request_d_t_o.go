// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SignRequestDTO sign request d t o
//
// swagger:model SignRequestDTO
type SignRequestDTO struct {

	// base
	Base *RequestDTO `json:"base,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// nickname
	Nickname string `json:"nickname,omitempty"`
}

// Validate validates this sign request d t o
func (m *SignRequestDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBase(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SignRequestDTO) validateBase(formats strfmt.Registry) error {
	if swag.IsZero(m.Base) { // not required
		return nil
	}

	if m.Base != nil {
		if err := m.Base.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("base")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sign request d t o based on the context it is used
func (m *SignRequestDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SignRequestDTO) contextValidateBase(ctx context.Context, formats strfmt.Registry) error {

	if m.Base != nil {

		if swag.IsZero(m.Base) { // not required
			return nil
		}

		if err := m.Base.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("base")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SignRequestDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SignRequestDTO) UnmarshalBinary(b []byte) error {
	var res SignRequestDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
