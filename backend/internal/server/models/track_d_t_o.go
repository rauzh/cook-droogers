// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TrackDTO track d t o
//
// swagger:model TrackDTO
type TrackDTO struct {

	// artists
	Artists []uint64 `json:"artists"`

	// duration
	// Required: true
	Duration *uint64 `json:"duration"`

	// genre
	// Required: true
	Genre *string `json:"genre"`

	// title
	// Required: true
	Title *string `json:"title"`

	// track id
	TrackID uint64 `json:"track_id,omitempty"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this track d t o
func (m *TrackDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGenre(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrackDTO) validateDuration(formats strfmt.Registry) error {

	if err := validate.Required("duration", "body", m.Duration); err != nil {
		return err
	}

	return nil
}

func (m *TrackDTO) validateGenre(formats strfmt.Registry) error {

	if err := validate.Required("genre", "body", m.Genre); err != nil {
		return err
	}

	return nil
}

func (m *TrackDTO) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

func (m *TrackDTO) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this track d t o based on context it is used
func (m *TrackDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TrackDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrackDTO) UnmarshalBinary(b []byte) error {
	var res TrackDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
