// Code generated by go-swagger; DO NOT EDIT.

package artists

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetArtistByIDParams creates a new GetArtistByIDParams object
// with the default values initialized.
func NewGetArtistByIDParams() GetArtistByIDParams {

	var (
		// initialize parameters with default values

		byUserIDDefault = bool(false)
	)

	return GetArtistByIDParams{
		ByUserID: &byUserIDDefault,
	}
}

// GetArtistByIDParams contains all the bound params for the get artist by ID operation
// typically these are obtained from a http.Request
//
// swagger:parameters getArtistByID
type GetArtistByIDParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Использовать ли user_id вместо artist_id
	  In: query
	  Default: false
	*/
	ByUserID *bool
	/*ID
	  Required: true
	  In: path
	*/
	ID uint64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetArtistByIDParams() beforehand.
func (o *GetArtistByIDParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qByUserID, qhkByUserID, _ := qs.GetOK("by_user_id")
	if err := o.bindByUserID(qByUserID, qhkByUserID, route.Formats); err != nil {
		res = append(res, err)
	}

	rID, rhkID, _ := route.Params.GetOK("id")
	if err := o.bindID(rID, rhkID, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindByUserID binds and validates parameter ByUserID from query.
func (o *GetArtistByIDParams) bindByUserID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetArtistByIDParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("by_user_id", "query", "bool", raw)
	}
	o.ByUserID = &value

	return nil
}

// bindID binds and validates parameter ID from path.
func (o *GetArtistByIDParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertUint64(raw)
	if err != nil {
		return errors.InvalidType("id", "path", "uint64", raw)
	}
	o.ID = value

	return nil
}
