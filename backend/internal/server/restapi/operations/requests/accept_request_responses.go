// Code generated by go-swagger; DO NOT EDIT.

package requests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"cookdroogers/internal/server/models"
)

// AcceptRequestOKCode is the HTTP code returned for type AcceptRequestOK
const AcceptRequestOKCode int = 200

/*
AcceptRequestOK Success

swagger:response acceptRequestOK
*/
type AcceptRequestOK struct {
}

// NewAcceptRequestOK creates AcceptRequestOK with default headers values
func NewAcceptRequestOK() *AcceptRequestOK {

	return &AcceptRequestOK{}
}

// WriteResponse to the client
func (o *AcceptRequestOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// AcceptRequestUnauthorizedCode is the HTTP code returned for type AcceptRequestUnauthorized
const AcceptRequestUnauthorizedCode int = 401

/*
AcceptRequestUnauthorized Auth error

swagger:response acceptRequestUnauthorized
*/
type AcceptRequestUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.LeErrorMessage `json:"body,omitempty"`
}

// NewAcceptRequestUnauthorized creates AcceptRequestUnauthorized with default headers values
func NewAcceptRequestUnauthorized() *AcceptRequestUnauthorized {

	return &AcceptRequestUnauthorized{}
}

// WithPayload adds the payload to the accept request unauthorized response
func (o *AcceptRequestUnauthorized) WithPayload(payload *models.LeErrorMessage) *AcceptRequestUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the accept request unauthorized response
func (o *AcceptRequestUnauthorized) SetPayload(payload *models.LeErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AcceptRequestUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AcceptRequestForbiddenCode is the HTTP code returned for type AcceptRequestForbidden
const AcceptRequestForbiddenCode int = 403

/*
AcceptRequestForbidden Invalid user type

swagger:response acceptRequestForbidden
*/
type AcceptRequestForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.LeErrorMessage `json:"body,omitempty"`
}

// NewAcceptRequestForbidden creates AcceptRequestForbidden with default headers values
func NewAcceptRequestForbidden() *AcceptRequestForbidden {

	return &AcceptRequestForbidden{}
}

// WithPayload adds the payload to the accept request forbidden response
func (o *AcceptRequestForbidden) WithPayload(payload *models.LeErrorMessage) *AcceptRequestForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the accept request forbidden response
func (o *AcceptRequestForbidden) SetPayload(payload *models.LeErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AcceptRequestForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AcceptRequestNotFoundCode is the HTTP code returned for type AcceptRequestNotFound
const AcceptRequestNotFoundCode int = 404

/*
AcceptRequestNotFound No such request

swagger:response acceptRequestNotFound
*/
type AcceptRequestNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.LeErrorMessage `json:"body,omitempty"`
}

// NewAcceptRequestNotFound creates AcceptRequestNotFound with default headers values
func NewAcceptRequestNotFound() *AcceptRequestNotFound {

	return &AcceptRequestNotFound{}
}

// WithPayload adds the payload to the accept request not found response
func (o *AcceptRequestNotFound) WithPayload(payload *models.LeErrorMessage) *AcceptRequestNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the accept request not found response
func (o *AcceptRequestNotFound) SetPayload(payload *models.LeErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AcceptRequestNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AcceptRequestConflictCode is the HTTP code returned for type AcceptRequestConflict
const AcceptRequestConflictCode int = 409

/*
AcceptRequestConflict Conflict

swagger:response acceptRequestConflict
*/
type AcceptRequestConflict struct {

	/*
	  In: Body
	*/
	Payload *models.LeErrorMessage `json:"body,omitempty"`
}

// NewAcceptRequestConflict creates AcceptRequestConflict with default headers values
func NewAcceptRequestConflict() *AcceptRequestConflict {

	return &AcceptRequestConflict{}
}

// WithPayload adds the payload to the accept request conflict response
func (o *AcceptRequestConflict) WithPayload(payload *models.LeErrorMessage) *AcceptRequestConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the accept request conflict response
func (o *AcceptRequestConflict) SetPayload(payload *models.LeErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AcceptRequestConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AcceptRequestUnprocessableEntityCode is the HTTP code returned for type AcceptRequestUnprocessableEntity
const AcceptRequestUnprocessableEntityCode int = 422

/*
AcceptRequestUnprocessableEntity Invalid params

swagger:response acceptRequestUnprocessableEntity
*/
type AcceptRequestUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.LeErrorMessage `json:"body,omitempty"`
}

// NewAcceptRequestUnprocessableEntity creates AcceptRequestUnprocessableEntity with default headers values
func NewAcceptRequestUnprocessableEntity() *AcceptRequestUnprocessableEntity {

	return &AcceptRequestUnprocessableEntity{}
}

// WithPayload adds the payload to the accept request unprocessable entity response
func (o *AcceptRequestUnprocessableEntity) WithPayload(payload *models.LeErrorMessage) *AcceptRequestUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the accept request unprocessable entity response
func (o *AcceptRequestUnprocessableEntity) SetPayload(payload *models.LeErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AcceptRequestUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AcceptRequestInternalServerErrorCode is the HTTP code returned for type AcceptRequestInternalServerError
const AcceptRequestInternalServerErrorCode int = 500

/*
AcceptRequestInternalServerError Internal error

swagger:response acceptRequestInternalServerError
*/
type AcceptRequestInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.LeErrorMessage `json:"body,omitempty"`
}

// NewAcceptRequestInternalServerError creates AcceptRequestInternalServerError with default headers values
func NewAcceptRequestInternalServerError() *AcceptRequestInternalServerError {

	return &AcceptRequestInternalServerError{}
}

// WithPayload adds the payload to the accept request internal server error response
func (o *AcceptRequestInternalServerError) WithPayload(payload *models.LeErrorMessage) *AcceptRequestInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the accept request internal server error response
func (o *AcceptRequestInternalServerError) SetPayload(payload *models.LeErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AcceptRequestInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
