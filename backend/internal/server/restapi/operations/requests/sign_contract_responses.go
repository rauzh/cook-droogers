// Code generated by go-swagger; DO NOT EDIT.

package requests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"cookdroogers/internal/server/models"
)

// SignContractCreatedCode is the HTTP code returned for type SignContractCreated
const SignContractCreatedCode int = 201

/*
SignContractCreated Request successfully created

swagger:response signContractCreated
*/
type SignContractCreated struct {
}

// NewSignContractCreated creates SignContractCreated with default headers values
func NewSignContractCreated() *SignContractCreated {

	return &SignContractCreated{}
}

// WriteResponse to the client
func (o *SignContractCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// SignContractUnauthorizedCode is the HTTP code returned for type SignContractUnauthorized
const SignContractUnauthorizedCode int = 401

/*
SignContractUnauthorized Auth error

swagger:response signContractUnauthorized
*/
type SignContractUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.LeErrorMessage `json:"body,omitempty"`
}

// NewSignContractUnauthorized creates SignContractUnauthorized with default headers values
func NewSignContractUnauthorized() *SignContractUnauthorized {

	return &SignContractUnauthorized{}
}

// WithPayload adds the payload to the sign contract unauthorized response
func (o *SignContractUnauthorized) WithPayload(payload *models.LeErrorMessage) *SignContractUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the sign contract unauthorized response
func (o *SignContractUnauthorized) SetPayload(payload *models.LeErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SignContractUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SignContractForbiddenCode is the HTTP code returned for type SignContractForbidden
const SignContractForbiddenCode int = 403

/*
SignContractForbidden Invalid user type

swagger:response signContractForbidden
*/
type SignContractForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.LeErrorMessage `json:"body,omitempty"`
}

// NewSignContractForbidden creates SignContractForbidden with default headers values
func NewSignContractForbidden() *SignContractForbidden {

	return &SignContractForbidden{}
}

// WithPayload adds the payload to the sign contract forbidden response
func (o *SignContractForbidden) WithPayload(payload *models.LeErrorMessage) *SignContractForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the sign contract forbidden response
func (o *SignContractForbidden) SetPayload(payload *models.LeErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SignContractForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SignContractUnprocessableEntityCode is the HTTP code returned for type SignContractUnprocessableEntity
const SignContractUnprocessableEntityCode int = 422

/*
SignContractUnprocessableEntity Invalid params

swagger:response signContractUnprocessableEntity
*/
type SignContractUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.LeErrorMessage `json:"body,omitempty"`
}

// NewSignContractUnprocessableEntity creates SignContractUnprocessableEntity with default headers values
func NewSignContractUnprocessableEntity() *SignContractUnprocessableEntity {

	return &SignContractUnprocessableEntity{}
}

// WithPayload adds the payload to the sign contract unprocessable entity response
func (o *SignContractUnprocessableEntity) WithPayload(payload *models.LeErrorMessage) *SignContractUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the sign contract unprocessable entity response
func (o *SignContractUnprocessableEntity) SetPayload(payload *models.LeErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SignContractUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SignContractInternalServerErrorCode is the HTTP code returned for type SignContractInternalServerError
const SignContractInternalServerErrorCode int = 500

/*
SignContractInternalServerError Internal error

swagger:response signContractInternalServerError
*/
type SignContractInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.LeErrorMessage `json:"body,omitempty"`
}

// NewSignContractInternalServerError creates SignContractInternalServerError with default headers values
func NewSignContractInternalServerError() *SignContractInternalServerError {

	return &SignContractInternalServerError{}
}

// WithPayload adds the payload to the sign contract internal server error response
func (o *SignContractInternalServerError) WithPayload(payload *models.LeErrorMessage) *SignContractInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the sign contract internal server error response
func (o *SignContractInternalServerError) SetPayload(payload *models.LeErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SignContractInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
