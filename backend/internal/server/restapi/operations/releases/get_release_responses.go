// Code generated by go-swagger; DO NOT EDIT.

package releases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"cookdroogers/internal/server/models"
)

// GetReleaseOKCode is the HTTP code returned for type GetReleaseOK
const GetReleaseOKCode int = 200

/*
GetReleaseOK Success

swagger:response getReleaseOK
*/
type GetReleaseOK struct {

	/*
	  In: Body
	*/
	Payload []*models.ReleaseDTO `json:"body,omitempty"`
}

// NewGetReleaseOK creates GetReleaseOK with default headers values
func NewGetReleaseOK() *GetReleaseOK {

	return &GetReleaseOK{}
}

// WithPayload adds the payload to the get release o k response
func (o *GetReleaseOK) WithPayload(payload []*models.ReleaseDTO) *GetReleaseOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get release o k response
func (o *GetReleaseOK) SetPayload(payload []*models.ReleaseDTO) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetReleaseOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.ReleaseDTO, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetReleaseUnauthorizedCode is the HTTP code returned for type GetReleaseUnauthorized
const GetReleaseUnauthorizedCode int = 401

/*
GetReleaseUnauthorized Auth error

swagger:response getReleaseUnauthorized
*/
type GetReleaseUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.LeErrorMessage `json:"body,omitempty"`
}

// NewGetReleaseUnauthorized creates GetReleaseUnauthorized with default headers values
func NewGetReleaseUnauthorized() *GetReleaseUnauthorized {

	return &GetReleaseUnauthorized{}
}

// WithPayload adds the payload to the get release unauthorized response
func (o *GetReleaseUnauthorized) WithPayload(payload *models.LeErrorMessage) *GetReleaseUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get release unauthorized response
func (o *GetReleaseUnauthorized) SetPayload(payload *models.LeErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetReleaseUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetReleaseForbiddenCode is the HTTP code returned for type GetReleaseForbidden
const GetReleaseForbiddenCode int = 403

/*
GetReleaseForbidden Invalid user type

swagger:response getReleaseForbidden
*/
type GetReleaseForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.LeErrorMessage `json:"body,omitempty"`
}

// NewGetReleaseForbidden creates GetReleaseForbidden with default headers values
func NewGetReleaseForbidden() *GetReleaseForbidden {

	return &GetReleaseForbidden{}
}

// WithPayload adds the payload to the get release forbidden response
func (o *GetReleaseForbidden) WithPayload(payload *models.LeErrorMessage) *GetReleaseForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get release forbidden response
func (o *GetReleaseForbidden) SetPayload(payload *models.LeErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetReleaseForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetReleaseInternalServerErrorCode is the HTTP code returned for type GetReleaseInternalServerError
const GetReleaseInternalServerErrorCode int = 500

/*
GetReleaseInternalServerError Internal error

swagger:response getReleaseInternalServerError
*/
type GetReleaseInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.LeErrorMessage `json:"body,omitempty"`
}

// NewGetReleaseInternalServerError creates GetReleaseInternalServerError with default headers values
func NewGetReleaseInternalServerError() *GetReleaseInternalServerError {

	return &GetReleaseInternalServerError{}
}

// WithPayload adds the payload to the get release internal server error response
func (o *GetReleaseInternalServerError) WithPayload(payload *models.LeErrorMessage) *GetReleaseInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get release internal server error response
func (o *GetReleaseInternalServerError) SetPayload(payload *models.LeErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetReleaseInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
