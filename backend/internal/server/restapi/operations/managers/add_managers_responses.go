// Code generated by go-swagger; DO NOT EDIT.

package managers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"cookdroogers/internal/server/models"
)

// AddManagersCreatedCode is the HTTP code returned for type AddManagersCreated
const AddManagersCreatedCode int = 201

/*
AddManagersCreated Manager successfully created

swagger:response addManagersCreated
*/
type AddManagersCreated struct {
}

// NewAddManagersCreated creates AddManagersCreated with default headers values
func NewAddManagersCreated() *AddManagersCreated {

	return &AddManagersCreated{}
}

// WriteResponse to the client
func (o *AddManagersCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// AddManagersUnauthorizedCode is the HTTP code returned for type AddManagersUnauthorized
const AddManagersUnauthorizedCode int = 401

/*
AddManagersUnauthorized Auth error

swagger:response addManagersUnauthorized
*/
type AddManagersUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.LeErrorMessage `json:"body,omitempty"`
}

// NewAddManagersUnauthorized creates AddManagersUnauthorized with default headers values
func NewAddManagersUnauthorized() *AddManagersUnauthorized {

	return &AddManagersUnauthorized{}
}

// WithPayload adds the payload to the add managers unauthorized response
func (o *AddManagersUnauthorized) WithPayload(payload *models.LeErrorMessage) *AddManagersUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add managers unauthorized response
func (o *AddManagersUnauthorized) SetPayload(payload *models.LeErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddManagersUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddManagersForbiddenCode is the HTTP code returned for type AddManagersForbidden
const AddManagersForbiddenCode int = 403

/*
AddManagersForbidden Invalid user type (your role)

swagger:response addManagersForbidden
*/
type AddManagersForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.LeErrorMessage `json:"body,omitempty"`
}

// NewAddManagersForbidden creates AddManagersForbidden with default headers values
func NewAddManagersForbidden() *AddManagersForbidden {

	return &AddManagersForbidden{}
}

// WithPayload adds the payload to the add managers forbidden response
func (o *AddManagersForbidden) WithPayload(payload *models.LeErrorMessage) *AddManagersForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add managers forbidden response
func (o *AddManagersForbidden) SetPayload(payload *models.LeErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddManagersForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddManagersNotFoundCode is the HTTP code returned for type AddManagersNotFound
const AddManagersNotFoundCode int = 404

/*
AddManagersNotFound No such user

swagger:response addManagersNotFound
*/
type AddManagersNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.LeErrorMessage `json:"body,omitempty"`
}

// NewAddManagersNotFound creates AddManagersNotFound with default headers values
func NewAddManagersNotFound() *AddManagersNotFound {

	return &AddManagersNotFound{}
}

// WithPayload adds the payload to the add managers not found response
func (o *AddManagersNotFound) WithPayload(payload *models.LeErrorMessage) *AddManagersNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add managers not found response
func (o *AddManagersNotFound) SetPayload(payload *models.LeErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddManagersNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddManagersConflictCode is the HTTP code returned for type AddManagersConflict
const AddManagersConflictCode int = 409

/*
AddManagersConflict Already exists

swagger:response addManagersConflict
*/
type AddManagersConflict struct {

	/*
	  In: Body
	*/
	Payload *models.LeErrorMessage `json:"body,omitempty"`
}

// NewAddManagersConflict creates AddManagersConflict with default headers values
func NewAddManagersConflict() *AddManagersConflict {

	return &AddManagersConflict{}
}

// WithPayload adds the payload to the add managers conflict response
func (o *AddManagersConflict) WithPayload(payload *models.LeErrorMessage) *AddManagersConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add managers conflict response
func (o *AddManagersConflict) SetPayload(payload *models.LeErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddManagersConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddManagersUnprocessableEntityCode is the HTTP code returned for type AddManagersUnprocessableEntity
const AddManagersUnprocessableEntityCode int = 422

/*
AddManagersUnprocessableEntity Invalid params

swagger:response addManagersUnprocessableEntity
*/
type AddManagersUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.LeErrorMessage `json:"body,omitempty"`
}

// NewAddManagersUnprocessableEntity creates AddManagersUnprocessableEntity with default headers values
func NewAddManagersUnprocessableEntity() *AddManagersUnprocessableEntity {

	return &AddManagersUnprocessableEntity{}
}

// WithPayload adds the payload to the add managers unprocessable entity response
func (o *AddManagersUnprocessableEntity) WithPayload(payload *models.LeErrorMessage) *AddManagersUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add managers unprocessable entity response
func (o *AddManagersUnprocessableEntity) SetPayload(payload *models.LeErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddManagersUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddManagersInternalServerErrorCode is the HTTP code returned for type AddManagersInternalServerError
const AddManagersInternalServerErrorCode int = 500

/*
AddManagersInternalServerError Internal error

swagger:response addManagersInternalServerError
*/
type AddManagersInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.LeErrorMessage `json:"body,omitempty"`
}

// NewAddManagersInternalServerError creates AddManagersInternalServerError with default headers values
func NewAddManagersInternalServerError() *AddManagersInternalServerError {

	return &AddManagersInternalServerError{}
}

// WithPayload adds the payload to the add managers internal server error response
func (o *AddManagersInternalServerError) WithPayload(payload *models.LeErrorMessage) *AddManagersInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add managers internal server error response
func (o *AddManagersInternalServerError) SetPayload(payload *models.LeErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddManagersInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
