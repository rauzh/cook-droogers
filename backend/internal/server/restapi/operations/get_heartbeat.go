// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetHeartbeatHandlerFunc turns a function with the right signature into a get heartbeat handler
type GetHeartbeatHandlerFunc func(GetHeartbeatParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetHeartbeatHandlerFunc) Handle(params GetHeartbeatParams) middleware.Responder {
	return fn(params)
}

// GetHeartbeatHandler interface for that can handle valid get heartbeat params
type GetHeartbeatHandler interface {
	Handle(GetHeartbeatParams) middleware.Responder
}

// NewGetHeartbeat creates a new http.Handler for the get heartbeat operation
func NewGetHeartbeat(ctx *middleware.Context, handler GetHeartbeatHandler) *GetHeartbeat {
	return &GetHeartbeat{Context: ctx, Handler: handler}
}

/*
	GetHeartbeat swagger:route GET /heartbeat getHeartbeat

Check health
*/
type GetHeartbeat struct {
	Context *middleware.Context
	Handler GetHeartbeatHandler
}

func (o *GetHeartbeat) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetHeartbeatParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
