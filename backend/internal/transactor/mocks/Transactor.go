// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Transactor is an autogenerated mock type for the Transactor type
type Transactor struct {
	mock.Mock
}

type Transactor_Expecter struct {
	mock *mock.Mock
}

func (_m *Transactor) EXPECT() *Transactor_Expecter {
	return &Transactor_Expecter{mock: &_m.Mock}
}

// BeginTransaction provides a mock function with given fields:
func (_m *Transactor) BeginTransaction() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BeginTransaction")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transactor_BeginTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTransaction'
type Transactor_BeginTransaction_Call struct {
	*mock.Call
}

// BeginTransaction is a helper method to define mock.On call
func (_e *Transactor_Expecter) BeginTransaction() *Transactor_BeginTransaction_Call {
	return &Transactor_BeginTransaction_Call{Call: _e.mock.On("BeginTransaction")}
}

func (_c *Transactor_BeginTransaction_Call) Run(run func()) *Transactor_BeginTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Transactor_BeginTransaction_Call) Return(_a0 string, _a1 error) *Transactor_BeginTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Transactor_BeginTransaction_Call) RunAndReturn(run func() (string, error)) *Transactor_BeginTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// CommitTransaction provides a mock function with given fields: _a0
func (_m *Transactor) CommitTransaction(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CommitTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Transactor_CommitTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitTransaction'
type Transactor_CommitTransaction_Call struct {
	*mock.Call
}

// CommitTransaction is a helper method to define mock.On call
//   - _a0 string
func (_e *Transactor_Expecter) CommitTransaction(_a0 interface{}) *Transactor_CommitTransaction_Call {
	return &Transactor_CommitTransaction_Call{Call: _e.mock.On("CommitTransaction", _a0)}
}

func (_c *Transactor_CommitTransaction_Call) Run(run func(_a0 string)) *Transactor_CommitTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Transactor_CommitTransaction_Call) Return(_a0 error) *Transactor_CommitTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Transactor_CommitTransaction_Call) RunAndReturn(run func(string) error) *Transactor_CommitTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// IsActive provides a mock function with given fields: _a0
func (_m *Transactor) IsActive(_a0 string) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for IsActive")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Transactor_IsActive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsActive'
type Transactor_IsActive_Call struct {
	*mock.Call
}

// IsActive is a helper method to define mock.On call
//   - _a0 string
func (_e *Transactor_Expecter) IsActive(_a0 interface{}) *Transactor_IsActive_Call {
	return &Transactor_IsActive_Call{Call: _e.mock.On("IsActive", _a0)}
}

func (_c *Transactor_IsActive_Call) Run(run func(_a0 string)) *Transactor_IsActive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Transactor_IsActive_Call) Return(_a0 bool) *Transactor_IsActive_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Transactor_IsActive_Call) RunAndReturn(run func(string) bool) *Transactor_IsActive_Call {
	_c.Call.Return(run)
	return _c
}

// RollbackTransaction provides a mock function with given fields: _a0
func (_m *Transactor) RollbackTransaction(_a0 string) {
	_m.Called(_a0)
}

// Transactor_RollbackTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RollbackTransaction'
type Transactor_RollbackTransaction_Call struct {
	*mock.Call
}

// RollbackTransaction is a helper method to define mock.On call
//   - _a0 string
func (_e *Transactor_Expecter) RollbackTransaction(_a0 interface{}) *Transactor_RollbackTransaction_Call {
	return &Transactor_RollbackTransaction_Call{Call: _e.mock.On("RollbackTransaction", _a0)}
}

func (_c *Transactor_RollbackTransaction_Call) Run(run func(_a0 string)) *Transactor_RollbackTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Transactor_RollbackTransaction_Call) Return() *Transactor_RollbackTransaction_Call {
	_c.Call.Return()
	return _c
}

func (_c *Transactor_RollbackTransaction_Call) RunAndReturn(run func(string)) *Transactor_RollbackTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// WithinTransaction provides a mock function with given fields: _a0, _a1
func (_m *Transactor) WithinTransaction(_a0 context.Context, _a1 func(context.Context) error) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for WithinTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Transactor_WithinTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithinTransaction'
type Transactor_WithinTransaction_Call struct {
	*mock.Call
}

// WithinTransaction is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 func(context.Context) error
func (_e *Transactor_Expecter) WithinTransaction(_a0 interface{}, _a1 interface{}) *Transactor_WithinTransaction_Call {
	return &Transactor_WithinTransaction_Call{Call: _e.mock.On("WithinTransaction", _a0, _a1)}
}

func (_c *Transactor_WithinTransaction_Call) Run(run func(_a0 context.Context, _a1 func(context.Context) error)) *Transactor_WithinTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context) error))
	})
	return _c
}

func (_c *Transactor_WithinTransaction_Call) Return(_a0 error) *Transactor_WithinTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Transactor_WithinTransaction_Call) RunAndReturn(run func(context.Context, func(context.Context) error) error) *Transactor_WithinTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransactor creates a new instance of Transactor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactor(t interface {
	mock.TestingT
	Cleanup(func())
}) *Transactor {
	mock := &Transactor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
