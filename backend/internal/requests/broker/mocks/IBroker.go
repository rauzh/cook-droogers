// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	sarama "github.com/IBM/sarama"
	mock "github.com/stretchr/testify/mock"
)

// IBroker is an autogenerated mock type for the IBroker type
type IBroker struct {
	mock.Mock
}

type IBroker_Expecter struct {
	mock *mock.Mock
}

func (_m *IBroker) EXPECT() *IBroker_Expecter {
	return &IBroker_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *IBroker) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IBroker_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type IBroker_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *IBroker_Expecter) Close() *IBroker_Close_Call {
	return &IBroker_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *IBroker_Close_Call) Run(run func()) *IBroker_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IBroker_Close_Call) Return(_a0 error) *IBroker_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IBroker_Close_Call) RunAndReturn(run func() error) *IBroker_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetConsumerByTopic provides a mock function with given fields: topic
func (_m *IBroker) GetConsumerByTopic(topic string) sarama.PartitionConsumer {
	ret := _m.Called(topic)

	if len(ret) == 0 {
		panic("no return value specified for GetConsumerByTopic")
	}

	var r0 sarama.PartitionConsumer
	if rf, ok := ret.Get(0).(func(string) sarama.PartitionConsumer); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sarama.PartitionConsumer)
		}
	}

	return r0
}

// IBroker_GetConsumerByTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConsumerByTopic'
type IBroker_GetConsumerByTopic_Call struct {
	*mock.Call
}

// GetConsumerByTopic is a helper method to define mock.On call
//   - topic string
func (_e *IBroker_Expecter) GetConsumerByTopic(topic interface{}) *IBroker_GetConsumerByTopic_Call {
	return &IBroker_GetConsumerByTopic_Call{Call: _e.mock.On("GetConsumerByTopic", topic)}
}

func (_c *IBroker_GetConsumerByTopic_Call) Run(run func(topic string)) *IBroker_GetConsumerByTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IBroker_GetConsumerByTopic_Call) Return(_a0 sarama.PartitionConsumer) *IBroker_GetConsumerByTopic_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IBroker_GetConsumerByTopic_Call) RunAndReturn(run func(string) sarama.PartitionConsumer) *IBroker_GetConsumerByTopic_Call {
	_c.Call.Return(run)
	return _c
}

// SendMessage provides a mock function with given fields: msg
func (_m *IBroker) SendMessage(msg *sarama.ProducerMessage) (int32, int64, error) {
	ret := _m.Called(msg)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 int32
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(*sarama.ProducerMessage) (int32, int64, error)); ok {
		return rf(msg)
	}
	if rf, ok := ret.Get(0).(func(*sarama.ProducerMessage) int32); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func(*sarama.ProducerMessage) int64); ok {
		r1 = rf(msg)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(*sarama.ProducerMessage) error); ok {
		r2 = rf(msg)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IBroker_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type IBroker_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - msg *sarama.ProducerMessage
func (_e *IBroker_Expecter) SendMessage(msg interface{}) *IBroker_SendMessage_Call {
	return &IBroker_SendMessage_Call{Call: _e.mock.On("SendMessage", msg)}
}

func (_c *IBroker_SendMessage_Call) Run(run func(msg *sarama.ProducerMessage)) *IBroker_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sarama.ProducerMessage))
	})
	return _c
}

func (_c *IBroker_SendMessage_Call) Return(partition int32, offset int64, err error) *IBroker_SendMessage_Call {
	_c.Call.Return(partition, offset, err)
	return _c
}

func (_c *IBroker_SendMessage_Call) RunAndReturn(run func(*sarama.ProducerMessage) (int32, int64, error)) *IBroker_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// SignConsumerToTopic provides a mock function with given fields: topic
func (_m *IBroker) SignConsumerToTopic(topic string) error {
	ret := _m.Called(topic)

	if len(ret) == 0 {
		panic("no return value specified for SignConsumerToTopic")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IBroker_SignConsumerToTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignConsumerToTopic'
type IBroker_SignConsumerToTopic_Call struct {
	*mock.Call
}

// SignConsumerToTopic is a helper method to define mock.On call
//   - topic string
func (_e *IBroker_Expecter) SignConsumerToTopic(topic interface{}) *IBroker_SignConsumerToTopic_Call {
	return &IBroker_SignConsumerToTopic_Call{Call: _e.mock.On("SignConsumerToTopic", topic)}
}

func (_c *IBroker_SignConsumerToTopic_Call) Run(run func(topic string)) *IBroker_SignConsumerToTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IBroker_SignConsumerToTopic_Call) Return(_a0 error) *IBroker_SignConsumerToTopic_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IBroker_SignConsumerToTopic_Call) RunAndReturn(run func(string) error) *IBroker_SignConsumerToTopic_Call {
	_c.Call.Return(run)
	return _c
}

// NewIBroker creates a new instance of IBroker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIBroker(t interface {
	mock.TestingT
	Cleanup(func())
}) *IBroker {
	mock := &IBroker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
