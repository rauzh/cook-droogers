// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	base "cookdroogers/internal/requests/base"
	criteria "cookdroogers/internal/requests/criteria_controller"

	mock "github.com/stretchr/testify/mock"
)

// Criteria is an autogenerated mock type for the Criteria type
type Criteria struct {
	mock.Mock
}

type Criteria_Expecter struct {
	mock *mock.Mock
}

func (_m *Criteria) EXPECT() *Criteria_Expecter {
	return &Criteria_Expecter{mock: &_m.Mock}
}

// Apply provides a mock function with given fields: _a0
func (_m *Criteria) Apply(_a0 base.IRequest) criteria.CriteriaDiff {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Apply")
	}

	var r0 criteria.CriteriaDiff
	if rf, ok := ret.Get(0).(func(base.IRequest) criteria.CriteriaDiff); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(criteria.CriteriaDiff)
	}

	return r0
}

// Criteria_Apply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Apply'
type Criteria_Apply_Call struct {
	*mock.Call
}

// Apply is a helper method to define mock.On call
//   - _a0 base.IRequest
func (_e *Criteria_Expecter) Apply(_a0 interface{}) *Criteria_Apply_Call {
	return &Criteria_Apply_Call{Call: _e.mock.On("Apply", _a0)}
}

func (_c *Criteria_Apply_Call) Run(run func(_a0 base.IRequest)) *Criteria_Apply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(base.IRequest))
	})
	return _c
}

func (_c *Criteria_Apply_Call) Return(_a0 criteria.CriteriaDiff) *Criteria_Apply_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Criteria_Apply_Call) RunAndReturn(run func(base.IRequest) criteria.CriteriaDiff) *Criteria_Apply_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *Criteria) Name() criteria.CriteriaName {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 criteria.CriteriaName
	if rf, ok := ret.Get(0).(func() criteria.CriteriaName); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(criteria.CriteriaName)
	}

	return r0
}

// Criteria_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type Criteria_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *Criteria_Expecter) Name() *Criteria_Name_Call {
	return &Criteria_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *Criteria_Name_Call) Run(run func()) *Criteria_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Criteria_Name_Call) Return(_a0 criteria.CriteriaName) *Criteria_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Criteria_Name_Call) RunAndReturn(run func() criteria.CriteriaName) *Criteria_Name_Call {
	_c.Call.Return(run)
	return _c
}

// NewCriteria creates a new instance of Criteria. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCriteria(t interface {
	mock.TestingT
	Cleanup(func())
}) *Criteria {
	mock := &Criteria{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
