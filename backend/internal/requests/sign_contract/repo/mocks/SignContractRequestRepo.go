// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	sign_contract "cookdroogers/internal/requests/sign_contract"
)

// SignContractRequestRepo is an autogenerated mock type for the SignContractRequestRepo type
type SignContractRequestRepo struct {
	mock.Mock
}

type SignContractRequestRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *SignContractRequestRepo) EXPECT() *SignContractRequestRepo_Expecter {
	return &SignContractRequestRepo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *SignContractRequestRepo) Create(_a0 context.Context, _a1 *sign_contract.SignContractRequest) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sign_contract.SignContractRequest) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SignContractRequestRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type SignContractRequestRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *sign_contract.SignContractRequest
func (_e *SignContractRequestRepo_Expecter) Create(_a0 interface{}, _a1 interface{}) *SignContractRequestRepo_Create_Call {
	return &SignContractRequestRepo_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *SignContractRequestRepo_Create_Call) Run(run func(_a0 context.Context, _a1 *sign_contract.SignContractRequest)) *SignContractRequestRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sign_contract.SignContractRequest))
	})
	return _c
}

func (_c *SignContractRequestRepo_Create_Call) Return(_a0 error) *SignContractRequestRepo_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SignContractRequestRepo_Create_Call) RunAndReturn(run func(context.Context, *sign_contract.SignContractRequest) error) *SignContractRequestRepo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *SignContractRequestRepo) Get(ctx context.Context, id uint64) (*sign_contract.SignContractRequest, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *sign_contract.SignContractRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*sign_contract.SignContractRequest, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *sign_contract.SignContractRequest); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sign_contract.SignContractRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignContractRequestRepo_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type SignContractRequestRepo_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint64
func (_e *SignContractRequestRepo_Expecter) Get(ctx interface{}, id interface{}) *SignContractRequestRepo_Get_Call {
	return &SignContractRequestRepo_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *SignContractRequestRepo_Get_Call) Run(run func(ctx context.Context, id uint64)) *SignContractRequestRepo_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *SignContractRequestRepo_Get_Call) Return(_a0 *sign_contract.SignContractRequest, _a1 error) *SignContractRequestRepo_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SignContractRequestRepo_Get_Call) RunAndReturn(run func(context.Context, uint64) (*sign_contract.SignContractRequest, error)) *SignContractRequestRepo_Get_Call {
	_c.Call.Return(run)
	return _c
}

// SetMeta provides a mock function with given fields: _a0, _a1
func (_m *SignContractRequestRepo) SetMeta(_a0 context.Context, _a1 *sign_contract.SignContractRequest) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SetMeta")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sign_contract.SignContractRequest) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SignContractRequestRepo_SetMeta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMeta'
type SignContractRequestRepo_SetMeta_Call struct {
	*mock.Call
}

// SetMeta is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *sign_contract.SignContractRequest
func (_e *SignContractRequestRepo_Expecter) SetMeta(_a0 interface{}, _a1 interface{}) *SignContractRequestRepo_SetMeta_Call {
	return &SignContractRequestRepo_SetMeta_Call{Call: _e.mock.On("SetMeta", _a0, _a1)}
}

func (_c *SignContractRequestRepo_SetMeta_Call) Run(run func(_a0 context.Context, _a1 *sign_contract.SignContractRequest)) *SignContractRequestRepo_SetMeta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sign_contract.SignContractRequest))
	})
	return _c
}

func (_c *SignContractRequestRepo_SetMeta_Call) Return(_a0 error) *SignContractRequestRepo_SetMeta_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SignContractRequestRepo_SetMeta_Call) RunAndReturn(run func(context.Context, *sign_contract.SignContractRequest) error) *SignContractRequestRepo_SetMeta_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *SignContractRequestRepo) Update(_a0 context.Context, _a1 *sign_contract.SignContractRequest) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sign_contract.SignContractRequest) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SignContractRequestRepo_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type SignContractRequestRepo_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *sign_contract.SignContractRequest
func (_e *SignContractRequestRepo_Expecter) Update(_a0 interface{}, _a1 interface{}) *SignContractRequestRepo_Update_Call {
	return &SignContractRequestRepo_Update_Call{Call: _e.mock.On("Update", _a0, _a1)}
}

func (_c *SignContractRequestRepo_Update_Call) Run(run func(_a0 context.Context, _a1 *sign_contract.SignContractRequest)) *SignContractRequestRepo_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sign_contract.SignContractRequest))
	})
	return _c
}

func (_c *SignContractRequestRepo_Update_Call) Return(_a0 error) *SignContractRequestRepo_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SignContractRequestRepo_Update_Call) RunAndReturn(run func(context.Context, *sign_contract.SignContractRequest) error) *SignContractRequestRepo_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewSignContractRequestRepo creates a new instance of SignContractRequestRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSignContractRequestRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *SignContractRequestRepo {
	mock := &SignContractRequestRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
