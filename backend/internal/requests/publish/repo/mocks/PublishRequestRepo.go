// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"
	publish "cookdroogers/internal/requests/publish"

	mock "github.com/stretchr/testify/mock"
)

// PublishRequestRepo is an autogenerated mock type for the PublishRequestRepo type
type PublishRequestRepo struct {
	mock.Mock
}

type PublishRequestRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *PublishRequestRepo) EXPECT() *PublishRequestRepo_Expecter {
	return &PublishRequestRepo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *PublishRequestRepo) Create(_a0 context.Context, _a1 *publish.PublishRequest) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *publish.PublishRequest) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishRequestRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type PublishRequestRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *publish.PublishRequest
func (_e *PublishRequestRepo_Expecter) Create(_a0 interface{}, _a1 interface{}) *PublishRequestRepo_Create_Call {
	return &PublishRequestRepo_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *PublishRequestRepo_Create_Call) Run(run func(_a0 context.Context, _a1 *publish.PublishRequest)) *PublishRequestRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*publish.PublishRequest))
	})
	return _c
}

func (_c *PublishRequestRepo_Create_Call) Return(_a0 error) *PublishRequestRepo_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PublishRequestRepo_Create_Call) RunAndReturn(run func(context.Context, *publish.PublishRequest) error) *PublishRequestRepo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *PublishRequestRepo) Get(ctx context.Context, id uint64) (*publish.PublishRequest, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *publish.PublishRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*publish.PublishRequest, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *publish.PublishRequest); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*publish.PublishRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublishRequestRepo_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type PublishRequestRepo_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint64
func (_e *PublishRequestRepo_Expecter) Get(ctx interface{}, id interface{}) *PublishRequestRepo_Get_Call {
	return &PublishRequestRepo_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *PublishRequestRepo_Get_Call) Run(run func(ctx context.Context, id uint64)) *PublishRequestRepo_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *PublishRequestRepo_Get_Call) Return(_a0 *publish.PublishRequest, _a1 error) *PublishRequestRepo_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PublishRequestRepo_Get_Call) RunAndReturn(run func(context.Context, uint64) (*publish.PublishRequest, error)) *PublishRequestRepo_Get_Call {
	_c.Call.Return(run)
	return _c
}

// SetMeta provides a mock function with given fields: _a0, _a1
func (_m *PublishRequestRepo) SetMeta(_a0 context.Context, _a1 *publish.PublishRequest) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SetMeta")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *publish.PublishRequest) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishRequestRepo_SetMeta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMeta'
type PublishRequestRepo_SetMeta_Call struct {
	*mock.Call
}

// SetMeta is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *publish.PublishRequest
func (_e *PublishRequestRepo_Expecter) SetMeta(_a0 interface{}, _a1 interface{}) *PublishRequestRepo_SetMeta_Call {
	return &PublishRequestRepo_SetMeta_Call{Call: _e.mock.On("SetMeta", _a0, _a1)}
}

func (_c *PublishRequestRepo_SetMeta_Call) Run(run func(_a0 context.Context, _a1 *publish.PublishRequest)) *PublishRequestRepo_SetMeta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*publish.PublishRequest))
	})
	return _c
}

func (_c *PublishRequestRepo_SetMeta_Call) Return(_a0 error) *PublishRequestRepo_SetMeta_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PublishRequestRepo_SetMeta_Call) RunAndReturn(run func(context.Context, *publish.PublishRequest) error) *PublishRequestRepo_SetMeta_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *PublishRequestRepo) Update(_a0 context.Context, _a1 *publish.PublishRequest) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *publish.PublishRequest) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishRequestRepo_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type PublishRequestRepo_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *publish.PublishRequest
func (_e *PublishRequestRepo_Expecter) Update(_a0 interface{}, _a1 interface{}) *PublishRequestRepo_Update_Call {
	return &PublishRequestRepo_Update_Call{Call: _e.mock.On("Update", _a0, _a1)}
}

func (_c *PublishRequestRepo_Update_Call) Run(run func(_a0 context.Context, _a1 *publish.PublishRequest)) *PublishRequestRepo_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*publish.PublishRequest))
	})
	return _c
}

func (_c *PublishRequestRepo_Update_Call) Return(_a0 error) *PublishRequestRepo_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PublishRequestRepo_Update_Call) RunAndReturn(run func(context.Context, *publish.PublishRequest) error) *PublishRequestRepo_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewPublishRequestRepo creates a new instance of PublishRequestRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPublishRequestRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *PublishRequestRepo {
	mock := &PublishRequestRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
