// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	models "cookdroogers/models"

	mock "github.com/stretchr/testify/mock"
)

// ReleaseRepo is an autogenerated mock type for the ReleaseRepo type
type ReleaseRepo struct {
	mock.Mock
}

type ReleaseRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *ReleaseRepo) EXPECT() *ReleaseRepo_Expecter {
	return &ReleaseRepo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0
func (_m *ReleaseRepo) Create(_a0 *models.Release) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Release) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReleaseRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ReleaseRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 *models.Release
func (_e *ReleaseRepo_Expecter) Create(_a0 interface{}) *ReleaseRepo_Create_Call {
	return &ReleaseRepo_Create_Call{Call: _e.mock.On("Create", _a0)}
}

func (_c *ReleaseRepo_Create_Call) Run(run func(_a0 *models.Release)) *ReleaseRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Release))
	})
	return _c
}

func (_c *ReleaseRepo_Create_Call) Return(_a0 error) *ReleaseRepo_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReleaseRepo_Create_Call) RunAndReturn(run func(*models.Release) error) *ReleaseRepo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: _a0
func (_m *ReleaseRepo) Get(_a0 uint64) (*models.Release, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *models.Release
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*models.Release, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint64) *models.Release); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Release)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseRepo_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type ReleaseRepo_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 uint64
func (_e *ReleaseRepo_Expecter) Get(_a0 interface{}) *ReleaseRepo_Get_Call {
	return &ReleaseRepo_Get_Call{Call: _e.mock.On("Get", _a0)}
}

func (_c *ReleaseRepo_Get_Call) Run(run func(_a0 uint64)) *ReleaseRepo_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *ReleaseRepo_Get_Call) Return(_a0 *models.Release, _a1 error) *ReleaseRepo_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReleaseRepo_Get_Call) RunAndReturn(run func(uint64) (*models.Release, error)) *ReleaseRepo_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllByArtist provides a mock function with given fields: artistID
func (_m *ReleaseRepo) GetAllByArtist(artistID uint64) ([]models.Release, error) {
	ret := _m.Called(artistID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllByArtist")
	}

	var r0 []models.Release
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) ([]models.Release, error)); ok {
		return rf(artistID)
	}
	if rf, ok := ret.Get(0).(func(uint64) []models.Release); ok {
		r0 = rf(artistID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Release)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(artistID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseRepo_GetAllByArtist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllByArtist'
type ReleaseRepo_GetAllByArtist_Call struct {
	*mock.Call
}

// GetAllByArtist is a helper method to define mock.On call
//   - artistID uint64
func (_e *ReleaseRepo_Expecter) GetAllByArtist(artistID interface{}) *ReleaseRepo_GetAllByArtist_Call {
	return &ReleaseRepo_GetAllByArtist_Call{Call: _e.mock.On("GetAllByArtist", artistID)}
}

func (_c *ReleaseRepo_GetAllByArtist_Call) Run(run func(artistID uint64)) *ReleaseRepo_GetAllByArtist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *ReleaseRepo_GetAllByArtist_Call) Return(_a0 []models.Release, _a1 error) *ReleaseRepo_GetAllByArtist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReleaseRepo_GetAllByArtist_Call) RunAndReturn(run func(uint64) ([]models.Release, error)) *ReleaseRepo_GetAllByArtist_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTracks provides a mock function with given fields: release
func (_m *ReleaseRepo) GetAllTracks(release *models.Release) ([]models.Track, error) {
	ret := _m.Called(release)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTracks")
	}

	var r0 []models.Track
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Release) ([]models.Track, error)); ok {
		return rf(release)
	}
	if rf, ok := ret.Get(0).(func(*models.Release) []models.Track); ok {
		r0 = rf(release)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Track)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.Release) error); ok {
		r1 = rf(release)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseRepo_GetAllTracks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTracks'
type ReleaseRepo_GetAllTracks_Call struct {
	*mock.Call
}

// GetAllTracks is a helper method to define mock.On call
//   - release *models.Release
func (_e *ReleaseRepo_Expecter) GetAllTracks(release interface{}) *ReleaseRepo_GetAllTracks_Call {
	return &ReleaseRepo_GetAllTracks_Call{Call: _e.mock.On("GetAllTracks", release)}
}

func (_c *ReleaseRepo_GetAllTracks_Call) Run(run func(release *models.Release)) *ReleaseRepo_GetAllTracks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Release))
	})
	return _c
}

func (_c *ReleaseRepo_GetAllTracks_Call) Return(_a0 []models.Track, _a1 error) *ReleaseRepo_GetAllTracks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReleaseRepo_GetAllTracks_Call) RunAndReturn(run func(*models.Release) ([]models.Track, error)) *ReleaseRepo_GetAllTracks_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0
func (_m *ReleaseRepo) Update(_a0 *models.Release) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Release) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReleaseRepo_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ReleaseRepo_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 *models.Release
func (_e *ReleaseRepo_Expecter) Update(_a0 interface{}) *ReleaseRepo_Update_Call {
	return &ReleaseRepo_Update_Call{Call: _e.mock.On("Update", _a0)}
}

func (_c *ReleaseRepo_Update_Call) Run(run func(_a0 *models.Release)) *ReleaseRepo_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Release))
	})
	return _c
}

func (_c *ReleaseRepo_Update_Call) Return(_a0 error) *ReleaseRepo_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReleaseRepo_Update_Call) RunAndReturn(run func(*models.Release) error) *ReleaseRepo_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function with given fields: id, stat
func (_m *ReleaseRepo) UpdateStatus(id uint64, stat models.ReleaseStatus) error {
	ret := _m.Called(id, stat)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, models.ReleaseStatus) error); ok {
		r0 = rf(id, stat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReleaseRepo_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type ReleaseRepo_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - id uint64
//   - stat models.ReleaseStatus
func (_e *ReleaseRepo_Expecter) UpdateStatus(id interface{}, stat interface{}) *ReleaseRepo_UpdateStatus_Call {
	return &ReleaseRepo_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", id, stat)}
}

func (_c *ReleaseRepo_UpdateStatus_Call) Run(run func(id uint64, stat models.ReleaseStatus)) *ReleaseRepo_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(models.ReleaseStatus))
	})
	return _c
}

func (_c *ReleaseRepo_UpdateStatus_Call) Return(_a0 error) *ReleaseRepo_UpdateStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReleaseRepo_UpdateStatus_Call) RunAndReturn(run func(uint64, models.ReleaseStatus) error) *ReleaseRepo_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewReleaseRepo creates a new instance of ReleaseRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReleaseRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReleaseRepo {
	mock := &ReleaseRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
