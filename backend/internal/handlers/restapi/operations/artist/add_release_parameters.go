// Code generated by go-swagger; DO NOT EDIT.

package artist

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"

	"cookdroogers/internal/handlers/models"
)

// NewAddReleaseParams creates a new AddReleaseParams object
//
// There are no default values defined in the spec.
func NewAddReleaseParams() AddReleaseParams {

	return AddReleaseParams{}
}

// AddReleaseParams contains all the bound params for the add release operation
// typically these are obtained from a http.Request
//
// swagger:parameters addRelease
type AddReleaseParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Дата написания релиза
	  Required: true
	  In: query
	*/
	Date strfmt.Date
	/*Название релиза
	  Required: true
	  In: query
	*/
	Title string
	/*Треки данного релиза
	  Required: true
	  In: body
	*/
	Tracks []*models.TrackDTO
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewAddReleaseParams() beforehand.
func (o *AddReleaseParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qDate, qhkDate, _ := qs.GetOK("date")
	if err := o.bindDate(qDate, qhkDate, route.Formats); err != nil {
		res = append(res, err)
	}

	qTitle, qhkTitle, _ := qs.GetOK("title")
	if err := o.bindTitle(qTitle, qhkTitle, route.Formats); err != nil {
		res = append(res, err)
	}

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body []*models.TrackDTO
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("tracks", "body", ""))
			} else {
				res = append(res, errors.NewParseError("tracks", "body", "", err))
			}
		} else {

			// validate array of body objects
			for i := range body {
				if body[i] == nil {
					continue
				}
				if err := body[i].Validate(route.Formats); err != nil {
					res = append(res, err)
					break
				}
			}

			if len(res) == 0 {
				o.Tracks = body
			}
		}
	} else {
		res = append(res, errors.Required("tracks", "body", ""))
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindDate binds and validates parameter Date from query.
func (o *AddReleaseParams) bindDate(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("date", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("date", "query", raw); err != nil {
		return err
	}

	// Format: date
	value, err := formats.Parse("date", raw)
	if err != nil {
		return errors.InvalidType("date", "query", "strfmt.Date", raw)
	}
	o.Date = *(value.(*strfmt.Date))

	if err := o.validateDate(formats); err != nil {
		return err
	}

	return nil
}

// validateDate carries on validations for parameter Date
func (o *AddReleaseParams) validateDate(formats strfmt.Registry) error {

	if err := validate.FormatOf("date", "query", "date", o.Date.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindTitle binds and validates parameter Title from query.
func (o *AddReleaseParams) bindTitle(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("title", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("title", "query", raw); err != nil {
		return err
	}
	o.Title = raw

	return nil
}
