// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"cookdroogers/internal/handlers/restapi/operations/admin"
	"cookdroogers/internal/handlers/restapi/operations/artist"
	"cookdroogers/internal/handlers/restapi/operations/guest"
	"cookdroogers/internal/handlers/restapi/operations/manager"
	"cookdroogers/internal/handlers/restapi/operations/non_member"
)

// NewSwaggerCookDroogersAPI creates a new SwaggerCookDroogers instance
func NewSwaggerCookDroogersAPI(spec *loads.Document) *SwaggerCookDroogersAPI {
	return &SwaggerCookDroogersAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		GetHeartbeatHandler: GetHeartbeatHandlerFunc(func(params GetHeartbeatParams) middleware.Responder {
			return middleware.NotImplemented("operation GetHeartbeat has not yet been implemented")
		}),
		ManagerAcceptRequestHandler: manager.AcceptRequestHandlerFunc(func(params manager.AcceptRequestParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation manager.AcceptRequest has not yet been implemented")
		}),
		AdminAddManagerHandler: admin.AddManagerHandlerFunc(func(params admin.AddManagerParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation admin.AddManager has not yet been implemented")
		}),
		ArtistAddReleaseHandler: artist.AddReleaseHandlerFunc(func(params artist.AddReleaseParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation artist.AddRelease has not yet been implemented")
		}),
		ManagerDeclineRequestHandler: manager.DeclineRequestHandlerFunc(func(params manager.DeclineRequestParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation manager.DeclineRequest has not yet been implemented")
		}),
		ManagerFetchStatsHandler: manager.FetchStatsHandlerFunc(func(params manager.FetchStatsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation manager.FetchStats has not yet been implemented")
		}),
		AdminGetManagersHandler: admin.GetManagersHandlerFunc(func(params admin.GetManagersParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation admin.GetManagers has not yet been implemented")
		}),
		ArtistGetReleaseHandler: artist.GetReleaseHandlerFunc(func(params artist.GetReleaseParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation artist.GetRelease has not yet been implemented")
		}),
		NonMemberGetRequestHandler: non_member.GetRequestHandlerFunc(func(params non_member.GetRequestParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation non_member.GetRequest has not yet been implemented")
		}),
		NonMemberGetRequestsHandler: non_member.GetRequestsHandlerFunc(func(params non_member.GetRequestsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation non_member.GetRequests has not yet been implemented")
		}),
		ArtistGetStatsHandler: artist.GetStatsHandlerFunc(func(params artist.GetStatsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation artist.GetStats has not yet been implemented")
		}),
		AdminGetUsersHandler: admin.GetUsersHandlerFunc(func(params admin.GetUsersParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation admin.GetUsers has not yet been implemented")
		}),
		ArtistPublishReqHandler: artist.PublishReqHandlerFunc(func(params artist.PublishReqParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation artist.PublishReq has not yet been implemented")
		}),
		GuestRegisterHandler: guest.RegisterHandlerFunc(func(params guest.RegisterParams) middleware.Responder {
			return middleware.NotImplemented("operation guest.Register has not yet been implemented")
		}),
		NonMemberSignContractHandler: non_member.SignContractHandlerFunc(func(params non_member.SignContractParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation non_member.SignContract has not yet been implemented")
		}),

		// Applies when the Authorization header is set with the Basic scheme
		BasicAuthAuth: func(user string, pass string) (interface{}, error) {
			return nil, errors.NotImplemented("basic auth  (basicAuth) has not yet been implemented")
		},
		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*SwaggerCookDroogersAPI the swagger cook droogers API */
type SwaggerCookDroogersAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// BasicAuthAuth registers a function that takes username and password and returns a principal
	// it performs authentication with basic auth
	BasicAuthAuth func(string, string) (interface{}, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// GetHeartbeatHandler sets the operation handler for the get heartbeat operation
	GetHeartbeatHandler GetHeartbeatHandler
	// ManagerAcceptRequestHandler sets the operation handler for the accept request operation
	ManagerAcceptRequestHandler manager.AcceptRequestHandler
	// AdminAddManagerHandler sets the operation handler for the add manager operation
	AdminAddManagerHandler admin.AddManagerHandler
	// ArtistAddReleaseHandler sets the operation handler for the add release operation
	ArtistAddReleaseHandler artist.AddReleaseHandler
	// ManagerDeclineRequestHandler sets the operation handler for the decline request operation
	ManagerDeclineRequestHandler manager.DeclineRequestHandler
	// ManagerFetchStatsHandler sets the operation handler for the fetch stats operation
	ManagerFetchStatsHandler manager.FetchStatsHandler
	// AdminGetManagersHandler sets the operation handler for the get managers operation
	AdminGetManagersHandler admin.GetManagersHandler
	// ArtistGetReleaseHandler sets the operation handler for the get release operation
	ArtistGetReleaseHandler artist.GetReleaseHandler
	// NonMemberGetRequestHandler sets the operation handler for the get request operation
	NonMemberGetRequestHandler non_member.GetRequestHandler
	// NonMemberGetRequestsHandler sets the operation handler for the get requests operation
	NonMemberGetRequestsHandler non_member.GetRequestsHandler
	// ArtistGetStatsHandler sets the operation handler for the get stats operation
	ArtistGetStatsHandler artist.GetStatsHandler
	// AdminGetUsersHandler sets the operation handler for the get users operation
	AdminGetUsersHandler admin.GetUsersHandler
	// ArtistPublishReqHandler sets the operation handler for the publish req operation
	ArtistPublishReqHandler artist.PublishReqHandler
	// GuestRegisterHandler sets the operation handler for the register operation
	GuestRegisterHandler guest.RegisterHandler
	// NonMemberSignContractHandler sets the operation handler for the sign contract operation
	NonMemberSignContractHandler non_member.SignContractHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *SwaggerCookDroogersAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *SwaggerCookDroogersAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *SwaggerCookDroogersAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *SwaggerCookDroogersAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *SwaggerCookDroogersAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *SwaggerCookDroogersAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *SwaggerCookDroogersAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *SwaggerCookDroogersAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *SwaggerCookDroogersAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the SwaggerCookDroogersAPI
func (o *SwaggerCookDroogersAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.BasicAuthAuth == nil {
		unregistered = append(unregistered, "BasicAuthAuth")
	}

	if o.GetHeartbeatHandler == nil {
		unregistered = append(unregistered, "GetHeartbeatHandler")
	}
	if o.ManagerAcceptRequestHandler == nil {
		unregistered = append(unregistered, "manager.AcceptRequestHandler")
	}
	if o.AdminAddManagerHandler == nil {
		unregistered = append(unregistered, "admin.AddManagerHandler")
	}
	if o.ArtistAddReleaseHandler == nil {
		unregistered = append(unregistered, "artist.AddReleaseHandler")
	}
	if o.ManagerDeclineRequestHandler == nil {
		unregistered = append(unregistered, "manager.DeclineRequestHandler")
	}
	if o.ManagerFetchStatsHandler == nil {
		unregistered = append(unregistered, "manager.FetchStatsHandler")
	}
	if o.AdminGetManagersHandler == nil {
		unregistered = append(unregistered, "admin.GetManagersHandler")
	}
	if o.ArtistGetReleaseHandler == nil {
		unregistered = append(unregistered, "artist.GetReleaseHandler")
	}
	if o.NonMemberGetRequestHandler == nil {
		unregistered = append(unregistered, "non_member.GetRequestHandler")
	}
	if o.NonMemberGetRequestsHandler == nil {
		unregistered = append(unregistered, "non_member.GetRequestsHandler")
	}
	if o.ArtistGetStatsHandler == nil {
		unregistered = append(unregistered, "artist.GetStatsHandler")
	}
	if o.AdminGetUsersHandler == nil {
		unregistered = append(unregistered, "admin.GetUsersHandler")
	}
	if o.ArtistPublishReqHandler == nil {
		unregistered = append(unregistered, "artist.PublishReqHandler")
	}
	if o.GuestRegisterHandler == nil {
		unregistered = append(unregistered, "guest.RegisterHandler")
	}
	if o.NonMemberSignContractHandler == nil {
		unregistered = append(unregistered, "non_member.SignContractHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *SwaggerCookDroogersAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *SwaggerCookDroogersAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {
		case "basicAuth":
			result[name] = o.BasicAuthenticator(o.BasicAuthAuth)

		}
	}
	return result
}

// Authorizer returns the registered authorizer
func (o *SwaggerCookDroogersAPI) Authorizer() runtime.Authorizer {
	return o.APIAuthorizer
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *SwaggerCookDroogersAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *SwaggerCookDroogersAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *SwaggerCookDroogersAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the swagger cook droogers API
func (o *SwaggerCookDroogersAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *SwaggerCookDroogersAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/heartbeat"] = NewGetHeartbeat(o.context, o.GetHeartbeatHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/requests/{req_id}/accept"] = manager.NewAcceptRequest(o.context, o.ManagerAcceptRequestHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/managers"] = admin.NewAddManager(o.context, o.AdminAddManagerHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/releases"] = artist.NewAddRelease(o.context, o.ArtistAddReleaseHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/requests/{req_id}/decline"] = manager.NewDeclineRequest(o.context, o.ManagerDeclineRequestHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/fetch-stats"] = manager.NewFetchStats(o.context, o.ManagerFetchStatsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/managers"] = admin.NewGetManagers(o.context, o.AdminGetManagersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/releases"] = artist.NewGetRelease(o.context, o.ArtistGetReleaseHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/requests/{req_id}"] = non_member.NewGetRequest(o.context, o.NonMemberGetRequestHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/requests"] = non_member.NewGetRequests(o.context, o.NonMemberGetRequestsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/stats"] = artist.NewGetStats(o.context, o.ArtistGetStatsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users"] = admin.NewGetUsers(o.context, o.AdminGetUsersHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/publish"] = artist.NewPublishReq(o.context, o.ArtistPublishReqHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/register"] = guest.NewRegister(o.context, o.GuestRegisterHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/sign-contract"] = non_member.NewSignContract(o.context, o.NonMemberSignContractHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *SwaggerCookDroogersAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *SwaggerCookDroogersAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *SwaggerCookDroogersAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *SwaggerCookDroogersAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *SwaggerCookDroogersAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[um][path] = builder(h)
	}
}
