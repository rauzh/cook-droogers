// Code generated by go-swagger; DO NOT EDIT.

package manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"cookdroogers/internal/handlers/models"
)

// AddManagerCreatedCode is the HTTP code returned for type AddManagerCreated
const AddManagerCreatedCode int = 201

/*
AddManagerCreated Manager successfully created

swagger:response addManagerCreated
*/
type AddManagerCreated struct {
}

// NewAddManagerCreated creates AddManagerCreated with default headers values
func NewAddManagerCreated() *AddManagerCreated {

	return &AddManagerCreated{}
}

// WriteResponse to the client
func (o *AddManagerCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// AddManagerUnauthorizedCode is the HTTP code returned for type AddManagerUnauthorized
const AddManagerUnauthorizedCode int = 401

/*
AddManagerUnauthorized Auth error

swagger:response addManagerUnauthorized
*/
type AddManagerUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.LeErrorMessage `json:"body,omitempty"`
}

// NewAddManagerUnauthorized creates AddManagerUnauthorized with default headers values
func NewAddManagerUnauthorized() *AddManagerUnauthorized {

	return &AddManagerUnauthorized{}
}

// WithPayload adds the payload to the add manager unauthorized response
func (o *AddManagerUnauthorized) WithPayload(payload *models.LeErrorMessage) *AddManagerUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add manager unauthorized response
func (o *AddManagerUnauthorized) SetPayload(payload *models.LeErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddManagerUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddManagerForbiddenCode is the HTTP code returned for type AddManagerForbidden
const AddManagerForbiddenCode int = 403

/*
AddManagerForbidden Invalid user type (your role)

swagger:response addManagerForbidden
*/
type AddManagerForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.LeErrorMessage `json:"body,omitempty"`
}

// NewAddManagerForbidden creates AddManagerForbidden with default headers values
func NewAddManagerForbidden() *AddManagerForbidden {

	return &AddManagerForbidden{}
}

// WithPayload adds the payload to the add manager forbidden response
func (o *AddManagerForbidden) WithPayload(payload *models.LeErrorMessage) *AddManagerForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add manager forbidden response
func (o *AddManagerForbidden) SetPayload(payload *models.LeErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddManagerForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddManagerNotFoundCode is the HTTP code returned for type AddManagerNotFound
const AddManagerNotFoundCode int = 404

/*
AddManagerNotFound No such user

swagger:response addManagerNotFound
*/
type AddManagerNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.LeErrorMessage `json:"body,omitempty"`
}

// NewAddManagerNotFound creates AddManagerNotFound with default headers values
func NewAddManagerNotFound() *AddManagerNotFound {

	return &AddManagerNotFound{}
}

// WithPayload adds the payload to the add manager not found response
func (o *AddManagerNotFound) WithPayload(payload *models.LeErrorMessage) *AddManagerNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add manager not found response
func (o *AddManagerNotFound) SetPayload(payload *models.LeErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddManagerNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddManagerConflictCode is the HTTP code returned for type AddManagerConflict
const AddManagerConflictCode int = 409

/*
AddManagerConflict Already exists

swagger:response addManagerConflict
*/
type AddManagerConflict struct {

	/*
	  In: Body
	*/
	Payload *models.LeErrorMessage `json:"body,omitempty"`
}

// NewAddManagerConflict creates AddManagerConflict with default headers values
func NewAddManagerConflict() *AddManagerConflict {

	return &AddManagerConflict{}
}

// WithPayload adds the payload to the add manager conflict response
func (o *AddManagerConflict) WithPayload(payload *models.LeErrorMessage) *AddManagerConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add manager conflict response
func (o *AddManagerConflict) SetPayload(payload *models.LeErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddManagerConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddManagerUnprocessableEntityCode is the HTTP code returned for type AddManagerUnprocessableEntity
const AddManagerUnprocessableEntityCode int = 422

/*
AddManagerUnprocessableEntity Invalid params

swagger:response addManagerUnprocessableEntity
*/
type AddManagerUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.LeErrorMessage `json:"body,omitempty"`
}

// NewAddManagerUnprocessableEntity creates AddManagerUnprocessableEntity with default headers values
func NewAddManagerUnprocessableEntity() *AddManagerUnprocessableEntity {

	return &AddManagerUnprocessableEntity{}
}

// WithPayload adds the payload to the add manager unprocessable entity response
func (o *AddManagerUnprocessableEntity) WithPayload(payload *models.LeErrorMessage) *AddManagerUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add manager unprocessable entity response
func (o *AddManagerUnprocessableEntity) SetPayload(payload *models.LeErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddManagerUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddManagerInternalServerErrorCode is the HTTP code returned for type AddManagerInternalServerError
const AddManagerInternalServerErrorCode int = 500

/*
AddManagerInternalServerError Internal error

swagger:response addManagerInternalServerError
*/
type AddManagerInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.LeErrorMessage `json:"body,omitempty"`
}

// NewAddManagerInternalServerError creates AddManagerInternalServerError with default headers values
func NewAddManagerInternalServerError() *AddManagerInternalServerError {

	return &AddManagerInternalServerError{}
}

// WithPayload adds the payload to the add manager internal server error response
func (o *AddManagerInternalServerError) WithPayload(payload *models.LeErrorMessage) *AddManagerInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add manager internal server error response
func (o *AddManagerInternalServerError) SetPayload(payload *models.LeErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddManagerInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
