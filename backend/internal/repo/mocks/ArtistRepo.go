// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"
	models "cookdroogers/models"

	mock "github.com/stretchr/testify/mock"
)

// ArtistRepo is an autogenerated mock type for the ArtistRepo type
type ArtistRepo struct {
	mock.Mock
}

type ArtistRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *ArtistRepo) EXPECT() *ArtistRepo_Expecter {
	return &ArtistRepo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *ArtistRepo) Create(_a0 context.Context, _a1 *models.Artist) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Artist) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArtistRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ArtistRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *models.Artist
func (_e *ArtistRepo_Expecter) Create(_a0 interface{}, _a1 interface{}) *ArtistRepo_Create_Call {
	return &ArtistRepo_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *ArtistRepo_Create_Call) Run(run func(_a0 context.Context, _a1 *models.Artist)) *ArtistRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Artist))
	})
	return _c
}

func (_c *ArtistRepo_Create_Call) Return(_a0 error) *ArtistRepo_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtistRepo_Create_Call) RunAndReturn(run func(context.Context, *models.Artist) error) *ArtistRepo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *ArtistRepo) Get(_a0 context.Context, _a1 uint64) (*models.Artist, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *models.Artist
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*models.Artist, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *models.Artist); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Artist)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtistRepo_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type ArtistRepo_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uint64
func (_e *ArtistRepo_Expecter) Get(_a0 interface{}, _a1 interface{}) *ArtistRepo_Get_Call {
	return &ArtistRepo_Get_Call{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *ArtistRepo_Get_Call) Run(run func(_a0 context.Context, _a1 uint64)) *ArtistRepo_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *ArtistRepo_Get_Call) Return(_a0 *models.Artist, _a1 error) *ArtistRepo_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtistRepo_Get_Call) RunAndReturn(run func(context.Context, uint64) (*models.Artist, error)) *ArtistRepo_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUserID provides a mock function with given fields: _a0, _a1
func (_m *ArtistRepo) GetByUserID(_a0 context.Context, _a1 uint64) (*models.Artist, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 *models.Artist
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*models.Artist, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *models.Artist); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Artist)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtistRepo_GetByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUserID'
type ArtistRepo_GetByUserID_Call struct {
	*mock.Call
}

// GetByUserID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uint64
func (_e *ArtistRepo_Expecter) GetByUserID(_a0 interface{}, _a1 interface{}) *ArtistRepo_GetByUserID_Call {
	return &ArtistRepo_GetByUserID_Call{Call: _e.mock.On("GetByUserID", _a0, _a1)}
}

func (_c *ArtistRepo_GetByUserID_Call) Run(run func(_a0 context.Context, _a1 uint64)) *ArtistRepo_GetByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *ArtistRepo_GetByUserID_Call) Return(_a0 *models.Artist, _a1 error) *ArtistRepo_GetByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtistRepo_GetByUserID_Call) RunAndReturn(run func(context.Context, uint64) (*models.Artist, error)) *ArtistRepo_GetByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *ArtistRepo) Update(_a0 context.Context, _a1 *models.Artist) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Artist) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArtistRepo_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ArtistRepo_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *models.Artist
func (_e *ArtistRepo_Expecter) Update(_a0 interface{}, _a1 interface{}) *ArtistRepo_Update_Call {
	return &ArtistRepo_Update_Call{Call: _e.mock.On("Update", _a0, _a1)}
}

func (_c *ArtistRepo_Update_Call) Run(run func(_a0 context.Context, _a1 *models.Artist)) *ArtistRepo_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Artist))
	})
	return _c
}

func (_c *ArtistRepo_Update_Call) Return(_a0 error) *ArtistRepo_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtistRepo_Update_Call) RunAndReturn(run func(context.Context, *models.Artist) error) *ArtistRepo_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewArtistRepo creates a new instance of ArtistRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArtistRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ArtistRepo {
	mock := &ArtistRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
