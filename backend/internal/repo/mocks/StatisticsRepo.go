// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"
	models "cookdroogers/models"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// StatisticsRepo is an autogenerated mock type for the StatisticsRepo type
type StatisticsRepo struct {
	mock.Mock
}

type StatisticsRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *StatisticsRepo) EXPECT() *StatisticsRepo_Expecter {
	return &StatisticsRepo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *StatisticsRepo) Create(_a0 context.Context, _a1 *models.Statistics) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Statistics) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StatisticsRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type StatisticsRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *models.Statistics
func (_e *StatisticsRepo_Expecter) Create(_a0 interface{}, _a1 interface{}) *StatisticsRepo_Create_Call {
	return &StatisticsRepo_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *StatisticsRepo_Create_Call) Run(run func(_a0 context.Context, _a1 *models.Statistics)) *StatisticsRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Statistics))
	})
	return _c
}

func (_c *StatisticsRepo_Create_Call) Return(_a0 error) *StatisticsRepo_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StatisticsRepo_Create_Call) RunAndReturn(run func(context.Context, *models.Statistics) error) *StatisticsRepo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMany provides a mock function with given fields: _a0, _a1
func (_m *StatisticsRepo) CreateMany(_a0 context.Context, _a1 []models.Statistics) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateMany")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.Statistics) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StatisticsRepo_CreateMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMany'
type StatisticsRepo_CreateMany_Call struct {
	*mock.Call
}

// CreateMany is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 []models.Statistics
func (_e *StatisticsRepo_Expecter) CreateMany(_a0 interface{}, _a1 interface{}) *StatisticsRepo_CreateMany_Call {
	return &StatisticsRepo_CreateMany_Call{Call: _e.mock.On("CreateMany", _a0, _a1)}
}

func (_c *StatisticsRepo_CreateMany_Call) Run(run func(_a0 context.Context, _a1 []models.Statistics)) *StatisticsRepo_CreateMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]models.Statistics))
	})
	return _c
}

func (_c *StatisticsRepo_CreateMany_Call) Return(_a0 error) *StatisticsRepo_CreateMany_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StatisticsRepo_CreateMany_Call) RunAndReturn(run func(context.Context, []models.Statistics) error) *StatisticsRepo_CreateMany_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllGroupByTracksSince provides a mock function with given fields: ctx, date
func (_m *StatisticsRepo) GetAllGroupByTracksSince(ctx context.Context, date time.Time) (*map[uint64][]models.Statistics, error) {
	ret := _m.Called(ctx, date)

	if len(ret) == 0 {
		panic("no return value specified for GetAllGroupByTracksSince")
	}

	var r0 *map[uint64][]models.Statistics
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) (*map[uint64][]models.Statistics, error)); ok {
		return rf(ctx, date)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) *map[uint64][]models.Statistics); ok {
		r0 = rf(ctx, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*map[uint64][]models.Statistics)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatisticsRepo_GetAllGroupByTracksSince_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllGroupByTracksSince'
type StatisticsRepo_GetAllGroupByTracksSince_Call struct {
	*mock.Call
}

// GetAllGroupByTracksSince is a helper method to define mock.On call
//   - ctx context.Context
//   - date time.Time
func (_e *StatisticsRepo_Expecter) GetAllGroupByTracksSince(ctx interface{}, date interface{}) *StatisticsRepo_GetAllGroupByTracksSince_Call {
	return &StatisticsRepo_GetAllGroupByTracksSince_Call{Call: _e.mock.On("GetAllGroupByTracksSince", ctx, date)}
}

func (_c *StatisticsRepo_GetAllGroupByTracksSince_Call) Run(run func(ctx context.Context, date time.Time)) *StatisticsRepo_GetAllGroupByTracksSince_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time))
	})
	return _c
}

func (_c *StatisticsRepo_GetAllGroupByTracksSince_Call) Return(_a0 *map[uint64][]models.Statistics, _a1 error) *StatisticsRepo_GetAllGroupByTracksSince_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StatisticsRepo_GetAllGroupByTracksSince_Call) RunAndReturn(run func(context.Context, time.Time) (*map[uint64][]models.Statistics, error)) *StatisticsRepo_GetAllGroupByTracksSince_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: _a0, _a1
func (_m *StatisticsRepo) GetByID(_a0 context.Context, _a1 uint64) (*models.Statistics, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.Statistics
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*models.Statistics, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *models.Statistics); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Statistics)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatisticsRepo_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type StatisticsRepo_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uint64
func (_e *StatisticsRepo_Expecter) GetByID(_a0 interface{}, _a1 interface{}) *StatisticsRepo_GetByID_Call {
	return &StatisticsRepo_GetByID_Call{Call: _e.mock.On("GetByID", _a0, _a1)}
}

func (_c *StatisticsRepo_GetByID_Call) Run(run func(_a0 context.Context, _a1 uint64)) *StatisticsRepo_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *StatisticsRepo_GetByID_Call) Return(_a0 *models.Statistics, _a1 error) *StatisticsRepo_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StatisticsRepo_GetByID_Call) RunAndReturn(run func(context.Context, uint64) (*models.Statistics, error)) *StatisticsRepo_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetForTrack provides a mock function with given fields: _a0, _a1
func (_m *StatisticsRepo) GetForTrack(_a0 context.Context, _a1 uint64) ([]models.Statistics, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetForTrack")
	}

	var r0 []models.Statistics
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) ([]models.Statistics, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) []models.Statistics); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Statistics)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatisticsRepo_GetForTrack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetForTrack'
type StatisticsRepo_GetForTrack_Call struct {
	*mock.Call
}

// GetForTrack is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uint64
func (_e *StatisticsRepo_Expecter) GetForTrack(_a0 interface{}, _a1 interface{}) *StatisticsRepo_GetForTrack_Call {
	return &StatisticsRepo_GetForTrack_Call{Call: _e.mock.On("GetForTrack", _a0, _a1)}
}

func (_c *StatisticsRepo_GetForTrack_Call) Run(run func(_a0 context.Context, _a1 uint64)) *StatisticsRepo_GetForTrack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *StatisticsRepo_GetForTrack_Call) Return(_a0 []models.Statistics, _a1 error) *StatisticsRepo_GetForTrack_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StatisticsRepo_GetForTrack_Call) RunAndReturn(run func(context.Context, uint64) ([]models.Statistics, error)) *StatisticsRepo_GetForTrack_Call {
	_c.Call.Return(run)
	return _c
}

// NewStatisticsRepo creates a new instance of StatisticsRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStatisticsRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *StatisticsRepo {
	mock := &StatisticsRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
