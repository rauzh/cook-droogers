// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	models "cookdroogers/models"

	mock "github.com/stretchr/testify/mock"
)

// RequestRepo is an autogenerated mock type for the RequestRepo type
type RequestRepo struct {
	mock.Mock
}

type RequestRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *RequestRepo) EXPECT() *RequestRepo_Expecter {
	return &RequestRepo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0
func (_m *RequestRepo) Create(_a0 *models.Request) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Request) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequestRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type RequestRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 *models.Request
func (_e *RequestRepo_Expecter) Create(_a0 interface{}) *RequestRepo_Create_Call {
	return &RequestRepo_Create_Call{Call: _e.mock.On("Create", _a0)}
}

func (_c *RequestRepo_Create_Call) Run(run func(_a0 *models.Request)) *RequestRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Request))
	})
	return _c
}

func (_c *RequestRepo_Create_Call) Return(_a0 error) *RequestRepo_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RequestRepo_Create_Call) RunAndReturn(run func(*models.Request) error) *RequestRepo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: _a0
func (_m *RequestRepo) Get(_a0 uint64) (*models.Request, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *models.Request
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*models.Request, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint64) *models.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestRepo_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type RequestRepo_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 uint64
func (_e *RequestRepo_Expecter) Get(_a0 interface{}) *RequestRepo_Get_Call {
	return &RequestRepo_Get_Call{Call: _e.mock.On("Get", _a0)}
}

func (_c *RequestRepo_Get_Call) Run(run func(_a0 uint64)) *RequestRepo_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *RequestRepo_Get_Call) Return(_a0 *models.Request, _a1 error) *RequestRepo_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RequestRepo_Get_Call) RunAndReturn(run func(uint64) (*models.Request, error)) *RequestRepo_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllByManagerID provides a mock function with given fields: _a0
func (_m *RequestRepo) GetAllByManagerID(_a0 uint64) ([]*models.Request, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAllByManagerID")
	}

	var r0 []*models.Request
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) ([]*models.Request, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint64) []*models.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestRepo_GetAllByManagerID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllByManagerID'
type RequestRepo_GetAllByManagerID_Call struct {
	*mock.Call
}

// GetAllByManagerID is a helper method to define mock.On call
//   - _a0 uint64
func (_e *RequestRepo_Expecter) GetAllByManagerID(_a0 interface{}) *RequestRepo_GetAllByManagerID_Call {
	return &RequestRepo_GetAllByManagerID_Call{Call: _e.mock.On("GetAllByManagerID", _a0)}
}

func (_c *RequestRepo_GetAllByManagerID_Call) Run(run func(_a0 uint64)) *RequestRepo_GetAllByManagerID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *RequestRepo_GetAllByManagerID_Call) Return(_a0 []*models.Request, _a1 error) *RequestRepo_GetAllByManagerID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RequestRepo_GetAllByManagerID_Call) RunAndReturn(run func(uint64) ([]*models.Request, error)) *RequestRepo_GetAllByManagerID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllByUserID provides a mock function with given fields: _a0
func (_m *RequestRepo) GetAllByUserID(_a0 uint64) ([]*models.Request, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAllByUserID")
	}

	var r0 []*models.Request
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) ([]*models.Request, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint64) []*models.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestRepo_GetAllByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllByUserID'
type RequestRepo_GetAllByUserID_Call struct {
	*mock.Call
}

// GetAllByUserID is a helper method to define mock.On call
//   - _a0 uint64
func (_e *RequestRepo_Expecter) GetAllByUserID(_a0 interface{}) *RequestRepo_GetAllByUserID_Call {
	return &RequestRepo_GetAllByUserID_Call{Call: _e.mock.On("GetAllByUserID", _a0)}
}

func (_c *RequestRepo_GetAllByUserID_Call) Run(run func(_a0 uint64)) *RequestRepo_GetAllByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *RequestRepo_GetAllByUserID_Call) Return(_a0 []*models.Request, _a1 error) *RequestRepo_GetAllByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RequestRepo_GetAllByUserID_Call) RunAndReturn(run func(uint64) ([]*models.Request, error)) *RequestRepo_GetAllByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0
func (_m *RequestRepo) Update(_a0 *models.Request) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Request) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequestRepo_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type RequestRepo_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 *models.Request
func (_e *RequestRepo_Expecter) Update(_a0 interface{}) *RequestRepo_Update_Call {
	return &RequestRepo_Update_Call{Call: _e.mock.On("Update", _a0)}
}

func (_c *RequestRepo_Update_Call) Run(run func(_a0 *models.Request)) *RequestRepo_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Request))
	})
	return _c
}

func (_c *RequestRepo_Update_Call) Return(_a0 error) *RequestRepo_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RequestRepo_Update_Call) RunAndReturn(run func(*models.Request) error) *RequestRepo_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewRequestRepo creates a new instance of RequestRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRequestRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *RequestRepo {
	mock := &RequestRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
