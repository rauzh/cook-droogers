// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"
	models "cookdroogers/models"

	mock "github.com/stretchr/testify/mock"
)

// TrackRepo is an autogenerated mock type for the TrackRepo type
type TrackRepo struct {
	mock.Mock
}

type TrackRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *TrackRepo) EXPECT() *TrackRepo_Expecter {
	return &TrackRepo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *TrackRepo) Create(_a0 context.Context, _a1 *models.Track) (uint64, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Track) (uint64, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Track) uint64); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Track) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TrackRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type TrackRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *models.Track
func (_e *TrackRepo_Expecter) Create(_a0 interface{}, _a1 interface{}) *TrackRepo_Create_Call {
	return &TrackRepo_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *TrackRepo_Create_Call) Run(run func(_a0 context.Context, _a1 *models.Track)) *TrackRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Track))
	})
	return _c
}

func (_c *TrackRepo_Create_Call) Return(_a0 uint64, _a1 error) *TrackRepo_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TrackRepo_Create_Call) RunAndReturn(run func(context.Context, *models.Track) (uint64, error)) *TrackRepo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *TrackRepo) Get(_a0 context.Context, _a1 uint64) (*models.Track, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *models.Track
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*models.Track, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *models.Track); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Track)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TrackRepo_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type TrackRepo_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uint64
func (_e *TrackRepo_Expecter) Get(_a0 interface{}, _a1 interface{}) *TrackRepo_Get_Call {
	return &TrackRepo_Get_Call{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *TrackRepo_Get_Call) Run(run func(_a0 context.Context, _a1 uint64)) *TrackRepo_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *TrackRepo_Get_Call) Return(_a0 *models.Track, _a1 error) *TrackRepo_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TrackRepo_Get_Call) RunAndReturn(run func(context.Context, uint64) (*models.Track, error)) *TrackRepo_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewTrackRepo creates a new instance of TrackRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTrackRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *TrackRepo {
	mock := &TrackRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
